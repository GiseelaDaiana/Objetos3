----QUIT----2024-06-28T10:18:01.94829+02:00 Pharo12.0-SNAPSHOT-64bit-9d04231.image priorSource: 0!----QUIT----2024-06-28T10:18:01.949749+02:00 Pharo12.0-SNAPSHOT-64bit-9d04231.image priorSource: 0!----QUIT----2024-06-28T10:18:40.0552+02:00 Pharo12.0-SNAPSHOT-64bit-9d04231.image priorSource: 100!----QUIT----2024-06-28T10:18:40.056825+02:00 Pharo12.0-SNAPSHOT-64bit-9d04231.image priorSource: 201!Object << #Trivaluado	slots: {};	sharedVariables: {};	package: 'TPFinal - Gisela Tamburro'!Trivaluado << #Verdadero	slots: {};	package: 'TPFinal - Gisela Tamburro'!Trivaluado << #Falso	slots: {};	package: 'TPFinal - Gisela Tamburro'!Trivaluado << #TError	slots: {};	package: 'TPFinal - Gisela Tamburro'!Smalltalk globals removeClassNamed: #AnObsoleteVerdadero!Smalltalk globals removeClassNamed: #AnObsoleteFalso!Smalltalk globals removeClassNamed: #AnObsoleteTrivaluado!Smalltalk globals removeClassNamed: #AnObsoleteTError!Object << #TriBoolean	layout: FixedLayout;	traits: {};	slots: {};	sharedVariables: {};	sharedPools: {};	tag: 'Objects' ;	package: 'Kernel'!Object subclass: #TriBoolean    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'TriValuedLogic'.!TriBoolean subclass: #Verdadero    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'TriValuedLogic'.!TriBoolean subclass: #Falso    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'TriValuedLogic'.!TriBoolean subclass: #Error    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'TriValuedLogic'.!Object subclass: #TriBoolean    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'TriValuedLogic'.!TriBoolean subclass: #Verdadero    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'TriValuedLogic'.!TriBoolean subclass: #Falso    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'TriValuedLogic'.!TriBoolean subclass: #TError    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'TriValuedLogic'.!!Verdadero methodsFor: 'nil' stamp: '6/30/2024 15:05'!& aTriBoolean    "Realiza la operación lógica AND con circuito corto"    ^aTriBoolean.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 15:09'!| aTriBoolean    "Realiza la operación lógica OR con circuito corto"    ^self.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 15:09'!and: aBlock    "Realiza la operación lógica AND con circuito largo"    ^aBlock value.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 15:09'!or: aBlock    "Realiza la operación lógica OR con circuito largo"    ^self.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 15:09'!not    "Realiza la operación lógica NOT"    ^Falso new.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 15:09'!esVerdadero    "Devuelve true si es verdadero"    ^true.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 15:09'!esFalso    "Devuelve false si es falso"    ^false.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 15:10'!esError    "Devuelve false si es error"    ^false.! !!Falso methodsFor: 'nil' stamp: '6/30/2024 15:11'!& aTriBoolean    ^aTriBoolean.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 15:12'!| aTriBoolean    ^self.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 15:12'!and: aBlock    ^aBlock value.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 15:12'!or: aBlock    ^self.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 15:12'!not    ^Falso new.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 15:13' prior: 7703!not    ^Verdadero new.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 15:13'!esVerdadero    "Devuelve true si es verdadero"    ^false.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 15:13' prior: 8091!esVerdadero    ^false.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 15:13'!esFalso    ^true.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 15:14'!esError    ^false.! !!TError methodsFor: 'nil' stamp: '6/30/2024 15:15'!& aTriBoolean    ^aTriBoolean.! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 15:15'!| aTriBoolean    ^self.! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 15:16'!and: aBlock    ^aBlock value.! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 15:16'!or: aBlock    ^self.! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 15:17'!not    ^self.! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 15:17'!esVerdadero    ^false.! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 15:17'!esFalso    ^false.! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 15:18'!esError    ^true.! !----SNAPSHOT----2024-06-30T15:19:03.124-03:00 Pharo 12.0 - 64bit (stable).image priorSource: 302!----SNAPSHOT----2024-06-30T15:19:03.135-03:00 Pharo 12.0 - 64bit (stable).image priorSource: 5123!----SNAPSHOT----2024-06-30T15:19:15.634-03:00 Pharo 12.0 - 64bit (stable).1.image priorSource: 5222!----SNAPSHOT----2024-06-30T15:19:15.637-03:00 Pharo 12.0 - 64bit (stable).1.image priorSource: 5322!!TriBoolean methodsFor: 'nil' stamp: '6/30/2024 15:19'!siVerdadero: aBlock    self esVerdadero ifTrue: [aBlock value].! !TriBoolean removeSelector: #siVerdadero:!!TriBoolean methodsFor: 'nil' stamp: '6/30/2024 15:23'!siVerdadero: aBlock    "Ejecuta el bloque si es verdadero"    self esVerdadero ifTrue: [aBlock value].! !TriBoolean removeSelector: #siVerdadero:!!TriBoolean methodsFor: 'nil' stamp: '6/30/2024 15:25'!siVerdadero: aBlock    "Ejecuta el bloque si es verdadero"    self esVerdadero ifTrue: [aBlock value].! !!TriBoolean methodsFor: 'as yet unclassified' stamp: '6/30/2024 15:25' prior: 11915!siVerdadero: aBlock    self esVerdadero ifTrue: [aBlock value].! !TriBoolean removeSelector: #siVerdadero:!!TriBoolean methodsFor: 'nil' stamp: '6/30/2024 15:29'!siVerdadero: aBlock    "Ejecuta el bloque si es verdadero"    self esVerdadero ifTrue: [aBlock value].! !!TriBoolean methodsFor: 'as yet unclassified' stamp: '6/30/2024 15:30' prior: 12635!siVerdadero: aBlock    "Ejecuta el bloque si es verdadero"    self esVerdadero ifTrue: [aBlock value].! !!TriBoolean methodsFor: 'as yet unclassified' stamp: '6/30/2024 15:30' prior: 13021!siVerdadero: aBlock    self esVerdadero ifTrue: [aBlock value].! !----SNAPSHOT----2024-06-30T15:32:14.695-03:00 Pharo 12.0 - 64bit (stable).1.image priorSource: 5424!----SNAPSHOT----2024-06-30T15:32:14.706-03:00 Pharo 12.0 - 64bit (stable).1.image priorSource: 6770!!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 15:32' prior: 6201!esVerdadero    ^true.! !!TriBoolean methodsFor: 'as yet unclassified' stamp: '6/30/2024 15:33' prior: 13407!siVerdadero: aBlock    self esVerdadero ifTrue: [aBlock value].! !TriBoolean removeSelector: #siVerdadero:!!TriBoolean methodsFor: 'nil' stamp: '6/30/2024 15:34'!siFalso: aBlock    "Ejecuta el bloque si es falso"    self esFalso ifTrue: [aBlock value].! !!TriBoolean methodsFor: 'as yet unclassified' stamp: '6/30/2024 15:34'!siError: aBlock    "Ejecuta el bloque si es error"    self esError ifTrue: [aBlock value].! !!TriBoolean methodsFor: 'as yet unclassified' stamp: '6/30/2024 15:34'!siVerdadero: trueBlock siFalso: falseBlock    "Ejecuta el bloque trueBlock si es verdadero, falseBlock si es falso"    self esVerdadero ifTrue: [^trueBlock value].    self esFalso ifTrue: [^falseBlock value].! !TriBoolean removeSelector: #siVerdadero:siFalso:!TriBoolean removeSelector: #siError:!TriBoolean removeSelector: #siFalso:!!TriBoolean methodsFor: 'nil' stamp: '6/30/2024 15:36'!esVerdadero    self subclassResponsibility.! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 15:36'!esFalso    self subclassResponsibility.! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 15:36'!esError    self subclassResponsibility.! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 15:37'!siVerdadero: aBlock    "Ejecuta el bloque si es verdadero"    self esVerdadero ifTrue: [aBlock value].! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 15:37' prior: 16841!siVerdadero: aBlock    self esVerdadero ifTrue: [aBlock value].! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 15:38'!siFalso: aBlock    self esFalso ifTrue: [aBlock value].! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 15:38'!siError: aBlock    self esError ifTrue: [aBlock value].! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 15:38'!siVerdadero: trueBlock siFalso: falseBlock    self esVerdadero ifTrue: [^trueBlock value].    self esFalso ifTrue: [^falseBlock value].! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 15:38'!siVerdadero: trueBlock siError: errorBlock    self esVerdadero ifTrue: [^trueBlock value].    self esError ifTrue: [^errorBlock value].! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 15:38'!siVerdadero: trueBlock siFalso: falseBlock siError: errorBlock    self esVerdadero ifTrue: [^trueBlock value].    self esFalso ifTrue: [^falseBlock value].    self esError ifTrue: [^errorBlock value].! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 16:17' prior: 8885!& aTriBoolean    ^self.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 16:18' prior: 6931!& aTriBoolean    ^self.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 16:19' prior: 7133!| aTriBoolean    ^aTriBoolean.! !TestCase subclass: #TriBooleanTest    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'TriValuedLogic-Tests'.!!TriBooleanTest methodsFor: 'nil' stamp: '6/30/2024 16:24'!testAndOperation    | v f e |    v := Verdadero new.    f := Falso new.    e := Error new.    self assert: (v & v) = v.    self assert: (v & f) = f.    self assert: (v & e) = e.    self assert: (f & v) = f.    self assert: (f & f) = f.    self assert: (f & e) = f.    self assert: (e & v) = e.    self assert: (e & f) = e.    self assert: (e & e) = e.! !!TriBooleanTest methodsFor: 'tests' stamp: '6/30/2024 16:25' prior: 20377!testAndOperation    | v f e |    v := Verdadero new.    f := Falso new.    e := TError new.    self assert: (v & v) = v.    self assert: (v & f) = f.    self assert: (v & e) = e.    self assert: (f & v) = f.    self assert: (f & f) = f.    self assert: (f & e) = f.    self assert: (e & v) = e.    self assert: (e & f) = e.    self assert: (e & e) = e.! !Smalltalk globals removeClassNamed: #AnObsoleteTriBooleanTest!!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 16:30' prior: 5935!not    ^Falso new.! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 16:43' prior: 9279!and: aTriBoolean    ^aTriBoolean value.! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 16:44' prior: 9481!or: aTriBoolean    ^self.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 16:44' prior: 7521!or: aTriBoolean    ^self.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 16:44' prior: 7321!and: aTriBoolean    ^aTriBoolean value.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 16:44' prior: 5629!or: aTriBoolean    ^self.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 16:44' prior: 6465!esFalso    ^false.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 16:45' prior: 6717!esError    ^false.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 16:45' prior: 5303!and: aTriBoolean    ^aTriBoolean value.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 16:45' prior: 4991!| aTriBoolean    ^self.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 16:45' prior: 4661!& aTriBoolean    ^aTriBoolean.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 17:05' prior: 22959!or: aTriBoolean    ^aTriBoolean.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 17:06' prior: 23175!and: aTriBoolean    ^self value.! !!Verdadero methodsFor: 'logical operations' stamp: '6/30/2024 17:16' prior: 23427!or: aTriBoolean	 aTriBoolean esError ifTrue: [^aTriBoolean].    ^self.! !!TError methodsFor: 'logical operations' stamp: '6/30/2024 17:19' prior: 22497!and: aTriBoolean    ^self value.! !!Falso methodsFor: 'logical operations' stamp: '6/30/2024 17:23' prior: 25005!and: aTriBoolean	 aTriBoolean esError ifTrue: [^aTriBoolean value].    ^self value.! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 17:25' prior: 18027!siVerdadero: trueTriBoolean siFalso: falseTriBoolean    self esVerdadero ifTrue: [^trueTriBoolean value].    self esFalso ifTrue: [^falseTriBoolean value].! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 17:25' prior: 18451!siVerdadero: trueTriBoolean siError: errorTriBoolean    self esVerdadero ifTrue: [^trueTriBoolean value].    self esError ifTrue: [^errorTriBoolean value].! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 17:25' prior: 17225!siVerdadero: aTriBoolean    self esVerdadero ifTrue: [aTriBoolean value].! !----SNAPSHOT----2024-06-30T17:25:57-03:00 Pharo 12.0 - 64bit (stable).1.image priorSource: 6872!----SNAPSHOT----2024-06-30T17:25:57.012-03:00 Pharo 12.0 - 64bit (stable).1.image priorSource: 13634!!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 17:26' prior: 17765!siError: aTriBoolean    self esError ifTrue: [aTriBoolean value].! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 17:26' prior: 17503!siFalso: aTriBoolean    self esFalso ifTrue: [aTriBoolean value].! !!TriBoolean methodsFor: 'logical operations' stamp: '6/30/2024 17:26' prior: 18875!siVerdadero: trueTriBoolean siFalso: falseTriBoolean siError: errorTriBoolean    self esVerdadero ifTrue: [^trueTriBoolean value].    self esFalso ifTrue: [^falseTriBoolean value].    self esError ifTrue: [^errorTriBoolean value].! !Object << #ComplexNumber	layout: FixedLayout;	traits: {};	slots: {};	sharedVariables: {};	sharedPools: {};	tag: '' ;	package: 'TriValuedLogic'!!ComplexNumber methodsFor: 'nil' stamp: '6/30/2024 17:31'!real: aReal imaginary: anImaginary    ^self new initializeReal: aReal imaginary: anImaginary.! !Smalltalk globals removeClassNamed: #AnObsoleteComplexNumber!Object subclass: #ComplexNumber    instanceVariableNames: 'real imaginary'    classVariableNames: ''	 package: 'TriValuedLogic'!!ComplexNumber methodsFor: 'nil' stamp: '6/30/2024 17:43'!real: aReal imaginary: anImaginary    ^self new initializeReal: aReal imaginary: anImaginary.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:45'!angle: anAngle radius: aRadius    ^self new initializeAngle: anAngle radius: aRadius.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:45'!initializeReal: aReal imaginary: anImaginary    real := aReal.    imaginary := anImaginary.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:46'!initializeAngle: anAngle radius: aRadius    real := aRadius * (anAngle cos).    imaginary := aRadius * (anAngle sin).! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:47'!real    ^real.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:47'!imaginary    ^imaginary.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:48'!angle    ^(imaginary / real) arcTan.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:48'!radius    ^(real squared + imaginary squared) sqrt.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:49'!+ aNumber    ^ComplexNumber real: (real + aNumber real) imaginary: (imaginary + aNumber imaginary).! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:49'!- aNumber    ^ComplexNumber real: (real - aNumber real) imaginary: (imaginary - aNumber imaginary).! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:49'!* aNumber    | newReal newImaginary |    newReal := (real * aNumber real) - (imaginary * aNumber imaginary).    newImaginary := (real * aNumber imaginary) + (imaginary * aNumber real).    ^ComplexNumber real: newReal imaginary: newImaginary.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 17:50'!/ aNumber    | divisor newReal newImaginary |    divisor := (aNumber real squared + aNumber imaginary squared).    newReal := ((real * aNumber real) + (imaginary * aNumber imaginary)) / divisor.    newImaginary := ((imaginary * aNumber real) - (real * aNumber imaginary)) / divisor.    ^ComplexNumber real: newReal imaginary: newImaginary.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 18:01' prior: 30735!initializeReal: aReal imaginary: anImaginary [    real := aReal.    imaginary := anImaginary.]! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:02' prior: 30059! real: aReal imaginary: anImaginary [    ^self new initializeReal: aReal imaginary: anImaginary]! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:08' prior: 34615!initializeReal: aReal imaginary: anImaginary     real := aReal.    imaginary := anImaginary.! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:09' prior: 34985!real: aReal imaginary: anImaginary     ^self new initializeReal: aReal imaginary: anImaginary! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:09' prior: 35721!real: aReal imaginary: anImaginary     ^self new initializeReal: aReal imaginary: anImaginary.! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:09' prior: 36083!real: aReal imaginary: anImaginary     ^self initializeReal: aReal imaginary: anImaginary.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 18:10' prior: 30405!angle: anAngle radius: aRadius    ^self initializeAngle: anAngle radius: aRadius.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 18:11' prior: 33087!* aNumber    | newReal newImaginary |    newReal := (real * aNumber real) - (imaginary * aNumber imaginary).    newImaginary := (real * aNumber imaginary) + (imaginary * aNumber real).    ^self real: newReal imaginary: newImaginary.! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 18:11' prior: 32365!+ aNumber    ^self real: (real + aNumber real) imaginary: (imaginary + aNumber imaginary).! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 18:11' prior: 32725!- aNumber    ^self real: (real - aNumber real) imaginary: (imaginary - aNumber imaginary).! !!ComplexNumber methodsFor: 'as yet unclassified' stamp: '6/30/2024 18:11' prior: 33739!/ aNumber    | divisor newReal newImaginary |    divisor := (aNumber real squared + aNumber imaginary squared).    newReal := ((real * aNumber real) + (imaginary * aNumber imaginary)) / divisor.    newImaginary := ((imaginary * aNumber real) - (real * aNumber imaginary)) / divisor.    ^self real: newReal imaginary: newImaginary.! !ComplexNumber removeSelector: #angle!ComplexNumber removeSelector: #+!ComplexNumber removeSelector: #angle:radius:!ComplexNumber removeSelector: #initializeAngle:radius:!ComplexNumber removeSelector: #real!ComplexNumber removeSelector: #-!ComplexNumber removeSelector: #*!ComplexNumber removeSelector: #/!ComplexNumber removeSelector: #radius!ComplexNumber removeSelector: #imaginary!!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:46' prior: 36447! real: unReal imaginary: unImaginario         ^self real: unReal imaginary: unImaginario .! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:50'!angle: anAngle radius: aRadius         | real imaginary |        real := aRadius * (anAngle cos).        imaginary := aRadius * (anAngle sin).        ^self  real: real imaginary: imaginary.    ! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:50' prior: 40545!angle: anAngle radius: aRadius         real := aRadius * (anAngle cos).        imaginary := aRadius * (anAngle sin).        ^self  real: real imaginary: imaginary.    ! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:50' prior: 40215!real: unReal imaginary: unImaginario         real := unReal.        imaginary := unImaginario.        ! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:51'! real         ^real.    ! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:51'!imaginary         ^imaginary.        ! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:52'!angle         ^(imaginary / real) arcTan.    ! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:52'!radius         ^(real squared + imaginary squared) sqrt.    ! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:53'! + unComplexNumber     ^self real: (real + unComplexNumber real) imaginary: (imaginary + unComplexNumber imaginary).! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:54'!- unComplexNumber     ^self real: (real - unComplexNumber real) imaginary: (imaginary - unComplexNumber imaginary).! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:55'!* unComplexNumber     | newReal newImaginary |    newReal := (real * unComplexNumber real) - (imaginary * unComplexNumber imaginary).    newImaginary := (real * unComplexNumber imaginary) + (imaginary * unComplexNumber real).    ^self real: newReal imaginary: newImaginary.! !!ComplexNumber methodsFor: 'initialization' stamp: '6/30/2024 18:55'!/ unComplexNumber     | denominator newReal newImaginary |    denominator := (unComplexNumber real squared + unComplexNumber imaginary squared).    newReal := ((real * unComplexNumber real) + (imaginary * unComplexNumber imaginary)) / denominator.    newImaginary := ((imaginary * unComplexNumber real) - (real * unComplexNumber imaginary)) / denominator.    ^self real: newReal imaginary: newImaginary.! !