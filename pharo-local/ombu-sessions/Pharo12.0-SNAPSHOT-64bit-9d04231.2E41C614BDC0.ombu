OmEntry {
	#tags : {
		#prior : OmReference [ 'Pharo12.0-SNAPSHOT-64bit-9d04231.21B9FE38CE10', '1' ],
		#self : OmReference [ '1' ]
	},
	#content : EpPackageAddition {
		#packageName : #TPFinal
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '1' ],
		#self : OmReference [ '2' ]
	},
	#content : EpPackageRemoval {
		#packageName : #TPFinal
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '2' ],
		#self : OmReference [ '3' ]
	},
	#content : EpPackageAddition {
		#packageName : #'TPFinal - Gisela Tamburro'
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '3' ],
		#self : OmReference [ '4' ]
	},
	#content : EpPackageTagAddition {
		#packageTagName : #Uncategorized,
		#packageName : #'TPFinal - Gisela Tamburro'
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '4' ],
		#self : OmReference [ '5' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Object,
				#definitionSource : 'Object << #Trivaluado\r\tslots: {};\r\tpackage: \'TPFinal - Gisela Tamburro\''
			},
			#name : #Trivaluado,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Object class << Trivaluado class\r\tslots: {}'
				},
				#name : #'Trivaluado class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #Trivaluado
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #'TPFinal - Gisela Tamburro',
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '5' ],
		#self : OmReference [ '6' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Trivaluado,
				#definitionSource : 'Trivaluado << #Verdadero\r\tslots: {};\r\tpackage: \'TPFinal - Gisela Tamburro\''
			},
			#name : #Verdadero,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Trivaluado class << Verdadero class\r\tslots: {}'
				},
				#name : #'Verdadero class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #Verdadero
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #'TPFinal - Gisela Tamburro',
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '6' ],
		#self : OmReference [ '7' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Trivaluado,
				#definitionSource : 'Trivaluado << #Falso\r\tslots: {};\r\tpackage: \'TPFinal - Gisela Tamburro\''
			},
			#name : #Falso,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Trivaluado class << Falso class\r\tslots: {}'
				},
				#name : #'Falso class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #Falso
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #'TPFinal - Gisela Tamburro',
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '7' ],
		#self : OmReference [ '8' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Trivaluado,
				#definitionSource : 'Trivaluado << #TError\r\tslots: {};\r\tpackage: \'TPFinal - Gisela Tamburro\''
			},
			#name : #TError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Trivaluado class << TError class\r\tslots: {}'
				},
				#name : #'TError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #'TPFinal - Gisela Tamburro',
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '8' ],
		#self : OmReference [ '9' ]
	},
	#content : EpClassRemoval {
		#classRemoved : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Trivaluado,
				#definitionSource : 'Trivaluado << #Verdadero\r\tslots: {};\r\tpackage: \'TPFinal - Gisela Tamburro\''
			},
			#name : #Verdadero,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Trivaluado class << Verdadero class\r\tslots: {}'
				},
				#name : #'AnObsoleteVerdadero class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #AnObsoleteVerdadero
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : #'TPFinal - Gisela Tamburro',
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '9' ],
		#self : OmReference [ '10' ]
	},
	#content : EpClassRemoval {
		#classRemoved : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Trivaluado,
				#definitionSource : 'Trivaluado << #Falso\r\tslots: {};\r\tpackage: \'TPFinal - Gisela Tamburro\''
			},
			#name : #Falso,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Trivaluado class << Falso class\r\tslots: {}'
				},
				#name : #'AnObsoleteFalso class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #AnObsoleteFalso
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : #'TPFinal - Gisela Tamburro',
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '10' ],
		#self : OmReference [ '11' ]
	},
	#content : EpClassRemoval {
		#classRemoved : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Object,
				#definitionSource : 'Object << #Trivaluado\r\tslots: {};\r\tpackage: \'TPFinal - Gisela Tamburro\''
			},
			#name : #Trivaluado,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Object class << Trivaluado class\r\tslots: {}'
				},
				#name : #'AnObsoleteTrivaluado class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #AnObsoleteTrivaluado
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : #'TPFinal - Gisela Tamburro',
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '11' ],
		#self : OmReference [ '12' ]
	},
	#content : EpPackageTagRemoval {
		#packageTagName : #Uncategorized,
		#packageName : #'TPFinal - Gisela Tamburro'
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '12' ],
		#self : OmReference [ '13' ]
	},
	#content : EpClassRemoval {
		#classRemoved : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : 'AnObsoleteTrivaluado',
				#definitionSource : 'AnObsoleteTrivaluado << #TError\r\tslots: {};\r\tpackage: \'TPFinal - Gisela Tamburro\''
			},
			#name : #TError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'AnObsoleteTrivaluado class << TError class\r\tslots: {}'
				},
				#name : #'AnObsoleteTError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #AnObsoleteTError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : #'TPFinal - Gisela Tamburro',
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '13' ],
		#self : OmReference [ '14' ]
	},
	#content : EpPackageRemoval {
		#packageName : #'TPFinal - Gisela Tamburro'
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '14' ],
		#self : OmReference [ '15' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Object,
				#definitionSource : 'Object << #TriBoolean\r\tslots: {};\r\ttag: \'Objects\';\r\tpackage: \'Kernel\''
			},
			#name : #TriBoolean,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Object class << TriBoolean class\r\tslots: {}'
				},
				#name : #'TriBoolean class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TriBoolean
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Objects,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '15' ],
		#self : OmReference [ '16' ]
	},
	#content : EpPackageAddition {
		#packageName : #TriValuedLogic
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '16' ],
		#self : OmReference [ '17' ]
	},
	#content : EpPackageTagAddition {
		#packageTagName : #Uncategorized,
		#packageName : #TriValuedLogic
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '17' ],
		#self : OmReference [ '18' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #TriBoolean,
				#definitionSource : 'TriBoolean << #Verdadero\r\tslots: {};\r\tpackage: \'TriValuedLogic\''
			},
			#name : #Verdadero,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'TriBoolean class << Verdadero class\r\tslots: {}'
				},
				#name : #'Verdadero class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #Verdadero
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #TriValuedLogic,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '18' ],
		#self : OmReference [ '19' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #TriBoolean,
				#definitionSource : 'TriBoolean << #Falso\r\tslots: {};\r\tpackage: \'TriValuedLogic\''
			},
			#name : #Falso,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'TriBoolean class << Falso class\r\tslots: {}'
				},
				#name : #'Falso class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #Falso
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #TriValuedLogic,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '19' ],
		#self : OmReference [ '20' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ArgumentsCountMismatch\r\tslots: { #expectedArgumentsCount . #calledArgumentsCount };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #ArgumentsCountMismatch,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ArgumentsCountMismatch
					},
					#name : #expectedArgumentsCount,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ArgumentsCountMismatch
					},
					#name : #calledArgumentsCount,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ArgumentsCountMismatch class\r\tslots: {}'
				},
				#name : #'ArgumentsCountMismatch class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ArgumentsCountMismatch
				},
				#parent : @6,
				#content : 'I am an error that is signalled in a case when a block is invoked with arguments count that does not match the count of arguments of the block.\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '20' ],
		#self : OmReference [ '21' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ArithmeticError,
				#definitionSource : 'ArithmeticError << #DomainError\r\tslots: { #from . #to };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #DomainError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #DomainError
					},
					#name : #from,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #DomainError
					},
					#name : #to,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ArithmeticError class << DomainError class\r\tslots: {}'
				},
				#name : #'DomainError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #DomainError
				},
				#parent : @6,
				#content : 'I am DomainError, an ArithmeticException indicating that some argument falls outside an expected domain, [from, to]\r\rWhen my valid interval is left- or right-open, use signal: creation protocol to provide a custom messageText rather than the default [from, to] notation.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '21' ],
		#self : OmReference [ '22' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ArithmeticError,
				#definitionSource : 'ArithmeticError << #ZeroDivide\r\tslots: { #dividend };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #ZeroDivide,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZeroDivide
					},
					#name : #dividend,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ArithmeticError class << ZeroDivide class\r\tslots: {}'
				},
				#name : #'ZeroDivide class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZeroDivide
				},
				#parent : @6,
				#content : 'I am ZeroDivide, an ArithmeticError that may be signaled when a mathematical division by 0 is attempted.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '22' ],
		#self : OmReference [ '23' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ArithmeticError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #ArithmeticError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ArithmeticError class\r\tslots: {}'
				},
				#name : #'ArithmeticError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ArithmeticError
				},
				#parent : @6,
				#content : 'I am ArithmeticError, the superclass of all exceptions related to arithmetic.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '23' ],
		#self : OmReference [ '24' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #AssertionFailure\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #AssertionFailure,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << AssertionFailure class\r\tslots: {}'
				},
				#name : #'AssertionFailure class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #AssertionFailure
				},
				#parent : @6,
				#content : 'AsssertionFailure is the exception signaled from Object>>assert: when the assertion block evaluates to false.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '24' ],
		#self : OmReference [ '25' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #CannotReturn,
				#definitionSource : 'CannotReturn << #BlockCannotReturn\r\tslots: { #home };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #BlockCannotReturn,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #BlockCannotReturn
					},
					#name : #home,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'CannotReturn class << BlockCannotReturn class\r\tslots: {}'
				},
				#name : #'BlockCannotReturn class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #BlockCannotReturn
				},
				#parent : @6,
				#content : 'This exception is thrown when a block tries to return but there is no home context.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '25' ],
		#self : OmReference [ '26' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #CannotReturn,
				#definitionSource : 'CannotReturn << #ContextCannotReturn\r\tslots: { #target };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #ContextCannotReturn,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ContextCannotReturn
					},
					#name : #target,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'CannotReturn class << ContextCannotReturn class\r\tslots: {}'
				},
				#name : #'ContextCannotReturn class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ContextCannotReturn
				},
				#parent : @6,
				#content : 'This exception is thrown when a value is returned from a context, but the context is dead and the return can not be done.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '26' ],
		#self : OmReference [ '27' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #CannotReturn\r\tslots: { #result };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #CannotReturn,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #CannotReturn
					},
					#name : #result,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << CannotReturn class\r\tslots: {}'
				},
				#name : #'CannotReturn class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CannotReturn
				},
				#parent : @6,
				#content : 'Block and Context cases for CannotReturn need to signal a dedicated exception.\r(see subclasses and the related testcases)',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '27' ],
		#self : OmReference [ '28' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileException,
				#definitionSource : 'FileException << #CannotDeleteFileException\r\tslots: {};\r\ttag: \'Core\';\r\tpackage: \'Files\''
			},
			#name : #CannotDeleteFileException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileException class << CannotDeleteFileException class\r\tslots: {}'
				},
				#name : #'CannotDeleteFileException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CannotDeleteFileException
				},
				#parent : @6,
				#content : 'Notfify when not able to delete',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Files,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Core,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '28' ],
		#self : OmReference [ '29' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileException,
				#definitionSource : 'FileException << #FileAlreadyExistsException\r\tslots: { #file };\r\ttag: \'Core\';\r\tpackage: \'Files\''
			},
			#name : #FileAlreadyExistsException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #FileAlreadyExistsException
					},
					#name : #file,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileException class << FileAlreadyExistsException class\r\tslots: {}'
				},
				#name : #'FileAlreadyExistsException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FileAlreadyExistsException
				},
				#parent : @6,
				#content : 'I am an exception that notifies that a file already exists.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Files,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Core,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '29' ],
		#self : OmReference [ '30' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileException,
				#definitionSource : 'FileException << #FileDoesNotExistException\r\tslots: { #readOnly };\r\ttag: \'Core\';\r\tpackage: \'Files\''
			},
			#name : #FileDoesNotExistException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #FileDoesNotExistException
					},
					#name : #readOnly,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileException class << FileDoesNotExistException class\r\tslots: {}'
				},
				#name : #'FileDoesNotExistException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FileDoesNotExistException
				},
				#parent : @6,
				#content : 'I am raised when an operation is attempted on a file that does not exist.\r\rThe method used to signal the exception depends on the form the file name exists in:\r\r- For strings: (FileDoesNotExistException file fileName: aString) signal \r- For Files: FileDoesNotExistException signalOnFile: aFile\r- For FileReferences: FileDoesNotExistException signalWith: aFileReference\r\r\rApplications that want to offer the user the opportunity to select a different file can use:\r\r\tUIManager default fileDoesNotExistsDefaultAction: exception\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Files,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Core,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '30' ],
		#self : OmReference [ '31' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileException,
				#definitionSource : 'FileException << #FileWriteError\r\tslots: {};\r\ttag: \'Core\';\r\tpackage: \'Files\''
			},
			#name : #FileWriteError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileException class << FileWriteError class\r\tslots: {}'
				},
				#name : #'FileWriteError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FileWriteError
				},
				#parent : @6,
				#content : 'Notify about an error when trying to attempt to write to a file',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Files,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Core,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '31' ],
		#self : OmReference [ '32' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileException,
				#definitionSource : 'FileException << #IllegalFileName\r\tslots: {};\r\ttag: \'Core\';\r\tpackage: \'Files\''
			},
			#name : #IllegalFileName,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileException class << IllegalFileName class\r\tslots: {}'
				},
				#name : #'IllegalFileName class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IllegalFileName
				},
				#parent : @6,
				#content : 'I am raised on an attempt to use an illegal file name, e.g. the file name is too long for the platform.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Files,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Core,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '32' ],
		#self : OmReference [ '33' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileException,
				#definitionSource : 'FileException << #ReadOnlyFileException\r\tslots: {};\r\ttag: \'Core\';\r\tpackage: \'Files\''
			},
			#name : #ReadOnlyFileException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileException class << ReadOnlyFileException class\r\tslots: {}'
				},
				#name : #'ReadOnlyFileException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ReadOnlyFileException
				},
				#parent : @6,
				#content : 'I am raised on an attempt to write to a read-only file store.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Files,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Core,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '33' ],
		#self : OmReference [ '34' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #FileException\r\tslots: { #fileName };\r\ttag: \'Core\';\r\tpackage: \'Files\''
			},
			#name : #FileException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #FileException
					},
					#name : #fileName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << FileException class\r\tslots: {}'
				},
				#name : #'FileException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FileException
				},
				#parent : @6,
				#content : 'Common superclass for exceptions while using file streams',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Files,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Core,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '34' ],
		#self : OmReference [ '35' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #CircularHierarchyError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Shift-ClassBuilder\''
			},
			#name : #CircularHierarchyError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << CircularHierarchyError class\r\tslots: {}'
				},
				#name : #'CircularHierarchyError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CircularHierarchyError
				},
				#parent : @6,
				#content : 'I am signaled if a new class introduces a circular class hierarchy.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Shift-ClassBuilder,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '35' ],
		#self : OmReference [ '36' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #CollectionIsEmpty\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Collections-Abstract\''
			},
			#name : #CollectionIsEmpty,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << CollectionIsEmpty class\r\tslots: {}'
				},
				#name : #'CollectionIsEmpty class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CollectionIsEmpty
				},
				#parent : @6,
				#content : 'I am CollectionIsEmpty, an exception indicating that an operation was attempted \ron an empty collection where that does not make sense.\rI am an Error and thus an Exception.\r\rThe collection that is empty is in my inherited signaler instance variable.\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Collections-Abstract,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '36' ],
		#self : OmReference [ '37' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #DuplicatedSlotName\r\tslots: { #newSlot . #oldSlot . #host };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #DuplicatedSlotName,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #DuplicatedSlotName
					},
					#name : #newSlot,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #DuplicatedSlotName
					},
					#name : #oldSlot,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #DuplicatedSlotName
					},
					#name : #host,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << DuplicatedSlotName class\r\tslots: {}'
				},
				#name : #'DuplicatedSlotName class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #DuplicatedSlotName
				},
				#parent : @6,
				#content : 'I am signaled when trying to build a class with a duplicated slot.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '37' ],
		#self : OmReference [ '38' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #DuplicatedVariableError\r\tslots: { #superclass . #variable };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #DuplicatedVariableError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #DuplicatedVariableError
					},
					#name : #superclass,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #DuplicatedVariableError
					},
					#name : #variable,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << DuplicatedVariableError class\r\tslots: {}'
				},
				#name : #'DuplicatedVariableError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #DuplicatedVariableError
				},
				#parent : @6,
				#content : 'I am an error signalled when a variable is redeclared. For instance when a method is created wich has a temporary or argument with the same name as an instance variable.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '38' ],
		#self : OmReference [ '39' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #IncompatibleLayoutConflict\r\tslots: { #layout . #subType };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #IncompatibleLayoutConflict,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IncompatibleLayoutConflict
					},
					#name : #layout,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IncompatibleLayoutConflict
					},
					#name : #subType,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << IncompatibleLayoutConflict class\r\tslots: {}'
				},
				#name : #'IncompatibleLayoutConflict class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IncompatibleLayoutConflict
				},
				#parent : @6,
				#content : 'I am an error raised when extending a class with an incompatible layout.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '39' ],
		#self : OmReference [ '40' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #InstanceVariableNotFound\r\tslots: { #instVarName };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #InstanceVariableNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #InstanceVariableNotFound
					},
					#name : #instVarName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << InstanceVariableNotFound class\r\tslots: {}'
				},
				#name : #'InstanceVariableNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #InstanceVariableNotFound
				},
				#parent : @6,
				#content : 'Description\r--------------------------\r\rI am an exception raised when we try to access to an instance variable by its name but the receiver does not know this instance variable.\r\rExamples \r--------------------------\r\r\tInstanceVariableNotFound signalFor: \'test\'.\r\t\r\tObject new instVarNamed: \'test\'.\r\t\r\t[ Object new instVarNamed: \'test\' ] on: InstanceVariableNotFound do: [ :ex | ex ].\r\rInternal Representation and Key Implementation Points.\r--------------------------\r\r    Instance Variables\r\tinstVarName:\t\t<aString>\tName of the instance variable we tried to access.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '40' ],
		#self : OmReference [ '41' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #InvalidGlobalName\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Shift-ClassBuilder\''
			},
			#name : #InvalidGlobalName,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << InvalidGlobalName class\r\tslots: {}'
				},
				#name : #'InvalidGlobalName class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #InvalidGlobalName
				},
				#parent : @6,
				#content : 'I am a warning signaled when trying to build a class with invalid name.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Shift-ClassBuilder,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '41' ],
		#self : OmReference [ '42' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #InvalidSlotName\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #InvalidSlotName,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << InvalidSlotName class\r\tslots: {}'
				},
				#name : #'InvalidSlotName class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #InvalidSlotName
				},
				#parent : @6,
				#content : 'I am signaled when the name of a Slot is an invalid variable name.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '42' ],
		#self : OmReference [ '43' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #NotFound,
				#definitionSource : 'NotFound << #KeyNotFound\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Collections-Unordered\''
			},
			#name : #KeyNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'NotFound class << KeyNotFound class\r\tslots: {}'
				},
				#name : #'KeyNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #KeyNotFound
				},
				#parent : @6,
				#content : 'I am KeyNotFound, an exception indicating that a key was not found in a Dictionary.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Collections-Unordered,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '43' ],
		#self : OmReference [ '44' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #NotFound,
				#definitionSource : 'NotFound << #ValueNotFound\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Collections-Unordered\''
			},
			#name : #ValueNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'NotFound class << ValueNotFound class\r\tslots: {}'
				},
				#name : #'ValueNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ValueNotFound
				},
				#parent : @6,
				#content : 'I am ValueNotFound, an exception indicating that a value was not found in a Dictionary.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Collections-Unordered,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '44' ],
		#self : OmReference [ '45' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #NotFound,
				#definitionSource : 'NotFound << #FFIVariableNameNotFound\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'UnifiedFFI\''
			},
			#name : #FFIVariableNameNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'NotFound class << FFIVariableNameNotFound class\r\tslots: {}'
				},
				#name : #'FFIVariableNameNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FFIVariableNameNotFound
				},
				#parent : @6,
				#content : 'I am FFIVariableNameNotFound, an exception to indicate that a variable is not correctly used inside an ffi function',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #UnifiedFFI,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '45' ],
		#self : OmReference [ '46' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #NotFound\r\tslots: { #object };\r\ttag: \'Errors\';\r\tpackage: \'Collections-Abstract\''
			},
			#name : #NotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #NotFound
					},
					#name : #object,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << NotFound class\r\tslots: {}'
				},
				#name : #'NotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #NotFound
				},
				#parent : @6,
				#content : 'I am NotFound, an exception to indicate that something is not found in a collection.\rI am an Error and thus Exception.\r\rTypically, the thing not found is in my object instance variable.\rThe collection where this thing was not found is in my inherited signaler instance variable.\r\r[ NotFound signalFor: 10 in: #(1 2 3) ] on: NotFound do: [ :exception | exception ]',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Collections-Abstract,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '46' ],
		#self : OmReference [ '47' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MessageNotUnderstood\r\tslots: { #message . #receiver . #reachedDefaultHandler };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #MessageNotUnderstood,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MessageNotUnderstood
					},
					#name : #message,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MessageNotUnderstood
					},
					#name : #receiver,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MessageNotUnderstood
					},
					#name : #reachedDefaultHandler,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MessageNotUnderstood class\r\tslots: {}'
				},
				#name : #'MessageNotUnderstood class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MessageNotUnderstood
				},
				#parent : @6,
				#content : 'This exception is provided to support Object>>doesNotUnderstand:.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '47' ],
		#self : OmReference [ '48' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ModificationForbidden,
				#definitionSource : 'ModificationForbidden << #MirrorModificationForbidden\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'ReflectionMirrors-Primitives\''
			},
			#name : #MirrorModificationForbidden,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ModificationForbidden class << MirrorModificationForbidden class\r\tslots: {}'
				},
				#name : #'MirrorModificationForbidden class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MirrorModificationForbidden
				},
				#parent : @6,
				#content : 'This exception is raised when mutating a read-only object using mirror primitives.\r\rI am signaled from MirrorPrimitive methods.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #ReflectionMirrors-Primitives,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '48' ],
		#self : OmReference [ '49' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ModificationForbidden\r\tslots: { #object . #fieldIndex . #newValue . #retrySelector };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #ModificationForbidden,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ModificationForbidden
					},
					#name : #object,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ModificationForbidden
					},
					#name : #fieldIndex,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ModificationForbidden
					},
					#name : #newValue,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ModificationForbidden
					},
					#name : #retrySelector,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ModificationForbidden class\r\tslots: {}'
				},
				#name : #'ModificationForbidden class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ModificationForbidden
				},
				#parent : @6,
				#content : 'This exception is raised when mutating a read-only object.\r\rMy instances have 4 fields to be able to reproduce the modification through retryModification method.\r\robject <Object> read-only object that the code attempted to mutate\rindex <SmallInteger> index of the field in the object mutated, relevant for the corresponding selector\rvalue <Object> value that was attempted to be stored into the read-only object\rselector <Symbol> selector that can be used to reproduce the mutation (typically, #at:put:, #instVarAt:put:, etc.)',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '49' ],
		#self : OmReference [ '50' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #NonBooleanReceiver\r\tslots: { #object };\r\tsharedVariables: { #MustBeBooleanHandler };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #NonBooleanReceiver,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #NonBooleanReceiver
					},
					#name : #object,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << NonBooleanReceiver class\r\tslots: {}'
				},
				#name : #'NonBooleanReceiver class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #NonBooleanReceiver
				},
				#parent : @6,
				#content : 'Some constructs are optimized in the compiler :\r#whileTrue:\r#whileFalse:\r#ifTrue:\r#ifFalse:\r#ifTrue:ifFalse:\r#ifFalse:ifTrue:\rSo you cannot by default use them on non boolean objects.\r\t\rIf you really need to use optimized constructs, you can enable Opal compiler and do one of the following :\r\t\t- recompile your method with the pragma : <compilerOptions: #(+ optIlineNone)>\r\t\t- recompile your class with the method : MyClass class>>compiler \r\t\t\t^ super compiler options: #(+ optIlineNone)\r\t\t- call from this method by Object>>#mustBeBooleanInMagic:"',
				#stamp : ''
			},
			#classVariables : OrderedCollection [
				RGClassVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #NonBooleanReceiver
					},
					#name : #MustBeBooleanHandler,
					#parent : @6
				}
			],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '50' ],
		#self : OmReference [ '51' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #SelectorException,
				#definitionSource : 'SelectorException << #NotYetImplemented\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #NotYetImplemented,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'SelectorException class << NotYetImplemented class\r\tslots: {}'
				},
				#name : #'NotYetImplemented class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #NotYetImplemented
				},
				#parent : @6,
				#content : 'I am NotYetImplement, an exception signaled when a method is a stub for code that will be implemented in the future.\r\rThis is used in incremental development, for example when doing Test First development.\rIt is similar to ShouldBeImplemented, with a slightly different meaning.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '51' ],
		#self : OmReference [ '52' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #SelectorException,
				#definitionSource : 'SelectorException << #PrimitiveFailed\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #PrimitiveFailed,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'SelectorException class << PrimitiveFailed class\r\tslots: {}'
				},
				#name : #'PrimitiveFailed class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #PrimitiveFailed
				},
				#parent : @6,
				#content : 'I am PrimitiveFailed, an exception signaled when a primitive fails.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '52' ],
		#self : OmReference [ '53' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #SelectorException,
				#definitionSource : 'SelectorException << #ShouldBeImplemented\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #ShouldBeImplemented,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'SelectorException class << ShouldBeImplemented class\r\tslots: {}'
				},
				#name : #'ShouldBeImplemented class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ShouldBeImplemented
				},
				#parent : @6,
				#content : 'I am ShouldBeImplemented, an exception signaled when some method should have been implemented but was not.\r\rThis is more like a placeholder during development.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '53' ],
		#self : OmReference [ '54' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #SelectorException,
				#definitionSource : 'SelectorException << #ShouldNotImplement\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #ShouldNotImplement,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'SelectorException class << ShouldNotImplement class\r\tslots: {}'
				},
				#name : #'ShouldNotImplement class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ShouldNotImplement
				},
				#parent : @6,
				#content : 'I am ShouldNotImplement, an exception signaled when a method was implemented but should not have been.\r\rThis can happen when an implementation is inherited.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '54' ],
		#self : OmReference [ '55' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #SelectorException,
				#definitionSource : 'SelectorException << #SubclassResponsibility\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #SubclassResponsibility,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'SelectorException class << SubclassResponsibility class\r\tslots: {}'
				},
				#name : #'SubclassResponsibility class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SubclassResponsibility
				},
				#parent : @6,
				#content : 'I am SubclassResponsibility, an exception signaled when an inherited method should have been implemented in a subclass but was not.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '55' ],
		#self : OmReference [ '56' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #SelectorException\r\tslots: { #selector };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #SelectorException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #SelectorException
					},
					#name : #selector,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << SelectorException class\r\tslots: {}'
				},
				#name : #'SelectorException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SelectorException
				},
				#parent : @6,
				#content : 'I am SelectorException, an abstract superclass for exceptions related to a selector.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '56' ],
		#self : OmReference [ '57' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #OutOfMemory\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #OutOfMemory,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << OutOfMemory class\r\tslots: {}'
				},
				#name : #'OutOfMemory class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #OutOfMemory
				},
				#parent : @6,
				#content : 'OutOfMemory is signaled when an allocation fails due to not having enough memory. Its default action signals the low-space semaphore.\rOriginally suggested by A. Raab.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '57' ],
		#self : OmReference [ '58' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #PackageConflictError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #PackageConflictError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << PackageConflictError class\r\tslots: {}'
				},
				#name : #'PackageConflictError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #PackageConflictError
				},
				#parent : @6,
				#content : 'I\'m an error that happens when someone attempts to register a package with a conflicting name. \rConflicting names can be of two ways: \r\rPackageA(tagB) conflicts with PackageA-B\rPackageA-B conflicts with PackageA(tagB)',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '58' ],
		#self : OmReference [ '59' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #SizeMismatch\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Collections-Abstract\''
			},
			#name : #SizeMismatch,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << SizeMismatch class\r\tslots: {}'
				},
				#name : #'SizeMismatch class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SizeMismatch
				},
				#parent : @6,
				#content : 'I am SizeMismatch, an exception indicating that an operation was attempted\ron two or more collections that don\'t match in size. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Collections-Abstract,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '59' ],
		#self : OmReference [ '60' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #SlotNotFound\r\tslots: { #name };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #SlotNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #SlotNotFound
					},
					#name : #name,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << SlotNotFound class\r\tslots: {}'
				},
				#name : #'SlotNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SlotNotFound
				},
				#parent : @6,
				#content : 'I am an exception to indicate that a slot is found in a layout or in the image.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '60' ],
		#self : OmReference [ '61' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #SubscriptOutOfBounds\r\tslots: { #subscript . #lowerBound . #upperBound };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #SubscriptOutOfBounds,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #SubscriptOutOfBounds
					},
					#name : #subscript,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #SubscriptOutOfBounds
					},
					#name : #lowerBound,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #SubscriptOutOfBounds
					},
					#name : #upperBound,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << SubscriptOutOfBounds class\r\tslots: {}'
				},
				#name : #'SubscriptOutOfBounds class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SubscriptOutOfBounds
				},
				#parent : @6,
				#content : 'I am SubscriptOutOfBounds, an exception indicating that some operation attempted to use a subscript outside allowed bounds.\r\rNormally, I hold the offending subscript and/or the allowed lowerBound and upperBound (inclusive).\r\rSubscriptOutOfBounds \r\tsignalFor: 10 \r\tlowerBound: 1 \r\tupperBound: 5 \r\tin: (Array new: 5)',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '61' ],
		#self : OmReference [ '62' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #SymbolNotFoundError\r\tslots: { #symbolName . #moduleName };\r\tpackage: \'FFI-Kernel\''
			},
			#name : #SymbolNotFoundError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #SymbolNotFoundError
					},
					#name : #symbolName,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #SymbolNotFoundError
					},
					#name : #moduleName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << SymbolNotFoundError class\r\tslots: {}'
				},
				#name : #'SymbolNotFoundError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SymbolNotFoundError
				},
				#parent : @6,
				#content : 'This is the error signaled when a symbol is not found.\rThe error shows the symbol name and the module.\rIf the module is nil, we assume is the main module of the application',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #FFI-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '62' ],
		#self : OmReference [ '63' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #UndeclaredVariableError,
				#definitionSource : 'UndeclaredVariableError << #UndeclaredVariableRead\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #UndeclaredVariableRead,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'UndeclaredVariableError class << UndeclaredVariableRead class\r\tslots: {}'
				},
				#name : #'UndeclaredVariableRead class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #UndeclaredVariableRead
				},
				#parent : @6,
				#content : 'This error is signaled on read attempt of undeclared variables',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '63' ],
		#self : OmReference [ '64' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #UndeclaredVariableError,
				#definitionSource : 'UndeclaredVariableError << #UndeclaredVariableWrite\r\tslots: { #value };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #UndeclaredVariableWrite,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #UndeclaredVariableWrite
					},
					#name : #value,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'UndeclaredVariableError class << UndeclaredVariableWrite class\r\tslots: {}'
				},
				#name : #'UndeclaredVariableWrite class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #UndeclaredVariableWrite
				},
				#parent : @6,
				#content : 'This error is signaled on write attempt to undeclared variables',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '64' ],
		#self : OmReference [ '65' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #UndeclaredVariableError\r\tslots: { #variable };\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel-CodeModel\''
			},
			#name : #UndeclaredVariableError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #UndeclaredVariableError
					},
					#name : #variable,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << UndeclaredVariableError class\r\tslots: {}'
				},
				#name : #'UndeclaredVariableError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #UndeclaredVariableError
				},
				#parent : @6,
				#content : 'I am an abstract superclass for exceptions related to a read and write access on undeclared variable.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-CodeModel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '65' ],
		#self : OmReference [ '66' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #UnwindError\r\tslots: {};\r\ttag: \'Processes\';\r\tpackage: \'Kernel\''
			},
			#name : #UnwindError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << UnwindError class\r\tslots: {}'
				},
				#name : #'UnwindError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #UnwindError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Processes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '66' ],
		#self : OmReference [ '67' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnByteStringBecameWideString\r\tslots: { #byteString . #wideString };\r\tpackage: \'Zinc-Character-Encoding-Core\''
			},
			#name : #ZnByteStringBecameWideString,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnByteStringBecameWideString
					},
					#name : #byteString,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnByteStringBecameWideString
					},
					#name : #wideString,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnByteStringBecameWideString class\r\tslots: {}'
				},
				#name : #'ZnByteStringBecameWideString class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnByteStringBecameWideString
				},
				#parent : @6,
				#content : 'I am ZnByteStringBecameWideString, a resumable Error signalled to indicate that some byteString was changed to a wideString.\r\rUsed by ZnUTF8Encoder>>#readInto:startingAt:count:fromStream: to avoid a #becomeForward: when a ByteString automagically changes into a WideString.\r\rPart of Zinc HTTP Components.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-Character-Encoding-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '67' ],
		#self : OmReference [ '68' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ZnCharacterEncodingError,
				#definitionSource : 'ZnCharacterEncodingError << #ZnIncomplete\r\tslots: {};\r\tpackage: \'Zinc-Character-Encoding-Core\''
			},
			#name : #ZnIncomplete,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ZnCharacterEncodingError class << ZnIncomplete class\r\tslots: {}'
				},
				#name : #'ZnIncomplete class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnIncomplete
				},
				#parent : @6,
				#content : 'I am ZnIncomplete.\rI am a ZnCharacterEncodingError.\rI am an Error.\r\rI signal when the binary stream from which a character is read does not contain enough data to form a full character. This typically occurs when the stream is #atEnd, a file is EOF or a network connection is closed - when the end of a stream is reached when more data is expected/needed.\r\rI can be used to ignore wrongly encoded input by resuming me. By default a question mark will be inserted for each problem and decoding will continue. This is not recommended, as faulty input should not be accepted.\r\rPart of Zinc HTTP Components',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-Character-Encoding-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '68' ],
		#self : OmReference [ '69' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ZnCharacterEncodingError,
				#definitionSource : 'ZnCharacterEncodingError << #ZnInvalidUTF8\r\tslots: {};\r\tpackage: \'Zinc-Character-Encoding-Core\''
			},
			#name : #ZnInvalidUTF8,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ZnCharacterEncodingError class << ZnInvalidUTF8 class\r\tslots: {}'
				},
				#name : #'ZnInvalidUTF8 class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnInvalidUTF8
				},
				#parent : @6,
				#content : 'I am ZnInvalidUTF8.\rI am a ZnCharacterEncodingError.\rI am an Error.\r\rI signal when something goes wrong while encoding or decoding UTF8.\r\rI can be used to ignore wrongly encoded input by resuming me. By default a question mark will be inserted for each problem and decoding will continue. This is not recommended, as faulty input should not be accepted.\r\rPart of Zinc HTTP Components',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-Character-Encoding-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '69' ],
		#self : OmReference [ '70' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnCharacterEncodingError\r\tslots: {};\r\tpackage: \'Zinc-Character-Encoding-Core\''
			},
			#name : #ZnCharacterEncodingError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnCharacterEncodingError class\r\tslots: {}'
				},
				#name : #'ZnCharacterEncodingError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnCharacterEncodingError
				},
				#parent : @6,
				#content : 'I am ZnCharacterEncodingError.\rI am an Error.\r\rI signal when something goes wrong while encoding or decoding characters.\r\rPart of Zinc HTTP Components',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-Character-Encoding-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '70' ],
		#self : OmReference [ '71' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #DateError\r\tslots: {};\r\tpackage: \'System-Time\''
			},
			#name : #DateError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << DateError class\r\tslots: {}'
				},
				#name : #'DateError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #DateError
				},
				#parent : @6,
				#content : 'A generic error raised when try to instantiate dates.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #System-Time,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '71' ],
		#self : OmReference [ '72' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #TimeError\r\tslots: {};\r\tpackage: \'System-Time\''
			},
			#name : #TimeError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << TimeError class\r\tslots: {}'
				},
				#name : #'TimeError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TimeError
				},
				#parent : @6,
				#content : 'I am an error thrown if Time expands outside a 24 hour range.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #System-Time,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '72' ],
		#self : OmReference [ '73' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #CodeError,
				#definitionSource : 'CodeError << #SyntaxErrorNotification\r\tslots: {};\r\tpackage: \'Deprecated12\''
			},
			#name : #SyntaxErrorNotification,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'CodeError class << SyntaxErrorNotification class\r\tslots: {}'
				},
				#name : #'SyntaxErrorNotification class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SyntaxErrorNotification
				},
				#parent : @6,
				#content : 'The role of SyntaxErrorNotification is to interface witht the compiler error handling of the system, see #syntaxErrorNotificationDefaultAction:\r\rThis is not a subclass of Error as the exception can lead to the user editing the code and continue compilation\r\rTODO: unify with the OCSemanticWarning hierarchy',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Deprecated12,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '73' ],
		#self : OmReference [ '74' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #CodeError\r\tslots: { #notice };\r\ttag: \'Exception\';\r\tpackage: \'AST-Core\''
			},
			#name : #CodeError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #CodeError
					},
					#name : #notice,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << CodeError class\r\tslots: {}'
				},
				#name : #'CodeError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CodeError
				},
				#parent : @6,
				#content : 'I represent a syntax or a semantic error in some pharo code.\r\rMy instances are signaled by the parser or the compiler.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #AST-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exception,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '74' ],
		#self : OmReference [ '75' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #RuntimeSyntaxError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'OpalCompiler-Core\''
			},
			#name : #RuntimeSyntaxError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << RuntimeSyntaxError class\r\tslots: {}'
				},
				#name : #'RuntimeSyntaxError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RuntimeSyntaxError
				},
				#parent : @6,
				#content : 'When compiling syntactically incorrect code, we compile raising this exception.\r\rThis way the debugger opens and the programmer can easily fix the faulty method',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #OpalCompiler-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '75' ],
		#self : OmReference [ '76' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MissingClassError\r\tslots: { #resumable . #className . #superclassName };\r\ttag: \'Errors\';\r\tpackage: \'CodeImport\''
			},
			#name : #MissingClassError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MissingClassError
					},
					#name : #resumable,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MissingClassError
					},
					#name : #className,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MissingClassError
					},
					#name : #superclassName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MissingClassError class\r\tslots: {}'
				},
				#name : #'MissingClassError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MissingClassError
				},
				#parent : @6,
				#content : 'I\'m a specialized error that is invoked when trying to load a method for a non existing class. \r\rBy default this exception is not resumable but it can be set and used for example as follow:\r\r\r\t[ FileStream fileIn: aFile ]\r\t\ton: MissingClassError\r\t\tdo: [ :exception | \r\t\t\t\texception defineClass. \r\t\t\t\texception asResumable.\r\t\t\t\texception resume. ]\r\t\t\t\r\t\t\t\rSo we give the possibility to compile and resume compution.\rThe method defineClass defines a simple class inheriting from Object (or from the class specified using #superclassName:)\rThe idea is that if later the effective class is loaded its definition will override  this one. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #CodeImport,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '76' ],
		#self : OmReference [ '77' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileSystemError,
				#definitionSource : 'FileSystemError << #DirectoryDoesNotExist\r\tslots: {};\r\ttag: \'Kernel-Errors\';\r\tpackage: \'FileSystem-Core\''
			},
			#name : #DirectoryDoesNotExist,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileSystemError class << DirectoryDoesNotExist class\r\tslots: {}'
				},
				#name : #'DirectoryDoesNotExist class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #DirectoryDoesNotExist
				},
				#parent : @6,
				#content : 'I am raised when I an operation is attempted inside a directory that does not exist. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #FileSystem-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '77' ],
		#self : OmReference [ '78' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileSystemError,
				#definitionSource : 'FileSystemError << #DirectoryIsNotEmpty\r\tslots: {};\r\ttag: \'Kernel-Errors\';\r\tpackage: \'FileSystem-Core\''
			},
			#name : #DirectoryIsNotEmpty,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileSystemError class << DirectoryIsNotEmpty class\r\tslots: {}'
				},
				#name : #'DirectoryIsNotEmpty class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #DirectoryIsNotEmpty
				},
				#parent : @6,
				#content : 'I am raised on an attempt to delete a directory when is not empty.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #FileSystem-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '78' ],
		#self : OmReference [ '79' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileSystemError,
				#definitionSource : 'FileSystemError << #FileAttributeNotSupported\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'FileSystem-Core\''
			},
			#name : #FileAttributeNotSupported,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileSystemError class << FileAttributeNotSupported class\r\tslots: {}'
				},
				#name : #'FileAttributeNotSupported class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FileAttributeNotSupported
				},
				#parent : @6,
				#content : 'FileAttributeNotSupported is signaled when an attempt is made to request an attribute that is not supported on the receiving file system.\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #FileSystem-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '79' ],
		#self : OmReference [ '80' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileSystemError,
				#definitionSource : 'FileSystemError << #DirectoryExists\r\tslots: {};\r\ttag: \'Kernel-Errors\';\r\tpackage: \'FileSystem-Core\''
			},
			#name : #DirectoryExists,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileSystemError class << DirectoryExists class\r\tslots: {}'
				},
				#name : #'DirectoryExists class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #DirectoryExists
				},
				#parent : @6,
				#content : 'I am raised on an attempt to create a directory that already exists.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #FileSystem-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '80' ],
		#self : OmReference [ '81' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileSystemError,
				#definitionSource : 'FileSystemError << #IllegalName\r\tslots: { #name };\r\ttag: \'Kernel-Errors\';\r\tpackage: \'FileSystem-Core\''
			},
			#name : #IllegalName,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IllegalName
					},
					#name : #name,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileSystemError class << IllegalName class\r\tslots: {}'
				},
				#name : #'IllegalName class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IllegalName
				},
				#parent : @6,
				#content : 'I am raised on an attempt to use an illegal file name\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #FileSystem-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '81' ],
		#self : OmReference [ '82' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FileSystemError,
				#definitionSource : 'FileSystemError << #FileExists\r\tslots: {};\r\ttag: \'Kernel-Errors\';\r\tpackage: \'FileSystem-Core\''
			},
			#name : #FileExists,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FileSystemError class << FileExists class\r\tslots: {}'
				},
				#name : #'FileExists class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FileExists
				},
				#parent : @6,
				#content : 'I am raised on an attempt to create a file or directory over top of an existing file.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #FileSystem-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '82' ],
		#self : OmReference [ '83' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #FileSystemError\r\tslots: { #reference };\r\ttag: \'Kernel-Errors\';\r\tpackage: \'FileSystem-Core\''
			},
			#name : #FileSystemError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #FileSystemError
					},
					#name : #reference,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << FileSystemError class\r\tslots: {}'
				},
				#name : #'FileSystemError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FileSystemError
				},
				#parent : @6,
				#content : 'I am an abstract superclass for errors that may occur during filesystem operations.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #FileSystem-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '83' ],
		#self : OmReference [ '84' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnPortNotANumber\r\tslots: { #port };\r\tpackage: \'Zinc-Resource-Meta-Core\''
			},
			#name : #ZnPortNotANumber,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnPortNotANumber
					},
					#name : #port,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnPortNotANumber class\r\tslots: {}'
				},
				#name : #'ZnPortNotANumber class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnPortNotANumber
				},
				#parent : @6,
				#content : 'ZnPortNotANumber is signalled when an URL is parsed containing an illegal port specification.\r\rPart of Zinc HTTP Components.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-Resource-Meta-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '84' ],
		#self : OmReference [ '85' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnTooManyDictionaryEntries\r\tslots: { #limit };\r\tpackage: \'Zinc-Resource-Meta-Core\''
			},
			#name : #ZnTooManyDictionaryEntries,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnTooManyDictionaryEntries
					},
					#name : #limit,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnTooManyDictionaryEntries class\r\tslots: {}'
				},
				#name : #'ZnTooManyDictionaryEntries class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnTooManyDictionaryEntries
				},
				#parent : @6,
				#content : 'ZnTooManyDictionaryEntries is signalled when too many entries are added to a limited ZnMultiValueDictionary.\r\rThis is a resumable exception\r\rPart of Zinc HTTP Components. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-Resource-Meta-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '85' ],
		#self : OmReference [ '86' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnUnknownScheme\r\tslots: { #scheme };\r\tpackage: \'Zinc-Resource-Meta-Core\''
			},
			#name : #ZnUnknownScheme,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnUnknownScheme
					},
					#name : #scheme,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnUnknownScheme class\r\tslots: {}'
				},
				#name : #'ZnUnknownScheme class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnUnknownScheme
				},
				#parent : @6,
				#content : 'ZnUnknownScheme is signalled when an unknown/unsupported URL scheme is found.\r\rPart of Zinc HTTP Components. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-Resource-Meta-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '86' ],
		#self : OmReference [ '87' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #CRCError\r\tslots: {};\r\ttag: \'Streams\';\r\tpackage: \'Compression\''
			},
			#name : #CRCError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << CRCError class\r\tslots: {}'
				},
				#name : #'CRCError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CRCError
				},
				#parent : @6,
				#content : 'CRC failed',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Compression,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Streams,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '87' ],
		#self : OmReference [ '88' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZipArchiveError\r\tslots: {};\r\ttag: \'Archives\';\r\tpackage: \'Compression\''
			},
			#name : #ZipArchiveError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZipArchiveError class\r\tslots: {}'
				},
				#name : #'ZipArchiveError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZipArchiveError
				},
				#parent : @6,
				#content : 'I\'m raised by ZipArchive when a trouble arrives.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Compression,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Archives,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '88' ],
		#self : OmReference [ '89' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MCRepositoryError\r\tslots: {};\r\ttag: \'Repositories\';\r\tpackage: \'Monticello\''
			},
			#name : #MCRepositoryError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MCRepositoryError class\r\tslots: {}'
				},
				#name : #'MCRepositoryError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MCRepositoryError
				},
				#parent : @6,
				#content : 'I am an MC-specific errror',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Monticello,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Repositories,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '89' ],
		#self : OmReference [ '90' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #InvalidSocketStatusException\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Kernel\''
			},
			#name : #InvalidSocketStatusException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << InvalidSocketStatusException class\r\tslots: {}'
				},
				#name : #'InvalidSocketStatusException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #InvalidSocketStatusException
				},
				#parent : @6,
				#content : 'Signals if an operation on a Socket found it in a state invalid for that operation.\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '90' ],
		#self : OmReference [ '91' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #NetworkError,
				#definitionSource : 'NetworkError << #ConnectionClosed\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Kernel\''
			},
			#name : #ConnectionClosed,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'NetworkError class << ConnectionClosed class\r\tslots: {}'
				},
				#name : #'ConnectionClosed class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ConnectionClosed
				},
				#parent : @6,
				#content : 'Signals a prematurely closed connection.\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '91' ],
		#self : OmReference [ '92' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #NetworkError,
				#definitionSource : 'NetworkError << #ConnectionRefused\r\tslots: { #host . #port };\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Kernel\''
			},
			#name : #ConnectionRefused,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ConnectionRefused
					},
					#name : #host,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ConnectionRefused
					},
					#name : #port,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'NetworkError class << ConnectionRefused class\r\tslots: {}'
				},
				#name : #'ConnectionRefused class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ConnectionRefused
				},
				#parent : @6,
				#content : 'Signals that a connection to the specified host and port was refused.\r\r\thost\t\thost which refused the connection\r\tport\t\tprot to which the connection was refused\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '92' ],
		#self : OmReference [ '93' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #NetworkError,
				#definitionSource : 'NetworkError << #ConnectionTimedOut\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Kernel\''
			},
			#name : #ConnectionTimedOut,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'NetworkError class << ConnectionTimedOut class\r\tslots: {}'
				},
				#name : #'ConnectionTimedOut class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ConnectionTimedOut
				},
				#parent : @6,
				#content : 'Signals that a connection attempt timed out.\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '93' ],
		#self : OmReference [ '94' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #NetworkError,
				#definitionSource : 'NetworkError << #NameLookupFailure\r\tslots: { #hostName };\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Kernel\''
			},
			#name : #NameLookupFailure,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #NameLookupFailure
					},
					#name : #hostName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'NetworkError class << NameLookupFailure class\r\tslots: {}'
				},
				#name : #'NameLookupFailure class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #NameLookupFailure
				},
				#parent : @6,
				#content : 'Signals that a name lookup operation failed.\r\r\thostName\thostName for which the name loopup failed\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '94' ],
		#self : OmReference [ '95' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #NetworkError,
				#definitionSource : 'NetworkError << #NoNetworkError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Kernel\''
			},
			#name : #NoNetworkError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'NetworkError class << NoNetworkError class\r\tslots: {}'
				},
				#name : #'NoNetworkError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #NoNetworkError
				},
				#parent : @6,
				#content : 'Signals that no network was found. This could happen, e.g., on dial-up connection when no connection was established when Squeak tried to access it.\r\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '95' ],
		#self : OmReference [ '96' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #SocketPrimitiveFailed,
				#definitionSource : 'SocketPrimitiveFailed << #NoBroadcastAllowed\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Kernel\''
			},
			#name : #NoBroadcastAllowed,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'SocketPrimitiveFailed class << NoBroadcastAllowed class\r\tslots: {}'
				},
				#name : #'NoBroadcastAllowed class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #NoBroadcastAllowed
				},
				#parent : @6,
				#content : 'A socket primitive failed due to no broadcast being allowed on this socket.\r\rThis failure is fairly specific, as IPv6 does not include broadcast, and it is not supported by the TCP protocol.\r\rUsually, the cause is one of two things;\r- We tried sending to the wrong address\r- We should have #setOption: \'SO_BROADCAST\' value: true on the (UDP) socket',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '96' ],
		#self : OmReference [ '97' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #NetworkError,
				#definitionSource : 'NetworkError << #SocketPrimitiveFailed\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Kernel\''
			},
			#name : #SocketPrimitiveFailed,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'NetworkError class << SocketPrimitiveFailed class\r\tslots: {}'
				},
				#name : #'SocketPrimitiveFailed class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SocketPrimitiveFailed
				},
				#parent : @6,
				#content : 'Notify that a socket primitive failed',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '97' ],
		#self : OmReference [ '98' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #NetworkError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Kernel\''
			},
			#name : #NetworkError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << NetworkError class\r\tslots: {}'
				},
				#name : #'NetworkError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #NetworkError
				},
				#parent : @6,
				#content : 'Abstract super class for all network related exceptions.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '98' ],
		#self : OmReference [ '99' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #SocketError\r\tslots: {};\r\ttag: \'Base\';\r\tpackage: \'Network-Kernel\''
			},
			#name : #SocketError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << SocketError class\r\tslots: {}'
				},
				#name : #'SocketError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SocketError
				},
				#parent : @6,
				#content : 'I am an error that is signalled when a Socket related primitive call is signaled',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Base,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '99' ],
		#self : OmReference [ '100' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ProtocolClientError,
				#definitionSource : 'ProtocolClientError << #LoginFailedException\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Protocols\''
			},
			#name : #LoginFailedException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ProtocolClientError class << LoginFailedException class\r\tslots: {}'
				},
				#name : #'LoginFailedException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LoginFailedException
				},
				#parent : @6,
				#content : 'Exception for signaling login failures of protocol clients.\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Protocols,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '100' ],
		#self : OmReference [ '101' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ProtocolClientError,
				#definitionSource : 'ProtocolClientError << #POP3LoginError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Protocols\''
			},
			#name : #POP3LoginError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ProtocolClientError class << POP3LoginError class\r\tslots: {}'
				},
				#name : #'POP3LoginError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #POP3LoginError
				},
				#parent : @6,
				#content : 'Exception for signaling POP3 login failures.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Protocols,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '101' ],
		#self : OmReference [ '102' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ProtocolClientError,
				#definitionSource : 'ProtocolClientError << #TelnetProtocolError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Protocols\''
			},
			#name : #TelnetProtocolError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ProtocolClientError class << TelnetProtocolError class\r\tslots: {}'
				},
				#name : #'TelnetProtocolError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TelnetProtocolError
				},
				#parent : @6,
				#content : 'Abstract super class for exceptions signalled by clients based on the telnet protocol.\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Protocols,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '102' ],
		#self : OmReference [ '103' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ProtocolClientError\r\tslots: { #protocolInstance };\r\ttag: \'Exceptions\';\r\tpackage: \'Network-Protocols\''
			},
			#name : #ProtocolClientError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ProtocolClientError
					},
					#name : #protocolInstance,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ProtocolClientError class\r\tslots: {}'
				},
				#name : #'ProtocolClientError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ProtocolClientError
				},
				#parent : @6,
				#content : 'Abstract super class for protocol clients\r\r\tprotocolInstance\t\treference to the protocol client throughing the exception. Exception handlers can access the client in order close, respond or whatever may be appropriate\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Network-Protocols,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '103' ],
		#self : OmReference [ '104' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MCPermissionDenied\r\tslots: { #repository };\r\tpackage: \'MonticelloRemoteRepositories\''
			},
			#name : #MCPermissionDenied,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MCPermissionDenied
					},
					#name : #repository,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MCPermissionDenied class\r\tslots: {}'
				},
				#name : #'MCPermissionDenied class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MCPermissionDenied
				},
				#parent : @6,
				#content : 'I am signalled when a repositroy cannot save or access a version.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #MonticelloRemoteRepositories,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '104' ],
		#self : OmReference [ '105' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnEntityTooLarge\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnEntityTooLarge,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnEntityTooLarge class\r\tslots: {}'
				},
				#name : #'ZnEntityTooLarge class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnEntityTooLarge
				},
				#parent : @6,
				#content : 'ZnEntityTooLarge is signalled when too big an entity is read from a stream.\r\rThis is a resumable exception',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '105' ],
		#self : OmReference [ '106' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnHttpUnsuccessful\r\tslots: { #response };\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnHttpUnsuccessful,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnHttpUnsuccessful
					},
					#name : #response,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnHttpUnsuccessful class\r\tslots: {}'
				},
				#name : #'ZnHttpUnsuccessful class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnHttpUnsuccessful
				},
				#parent : @6,
				#content : 'ZnHttpUnsuccessful is signalled when an HTTP client receives a non success response.\r\rSee ZnResponse>>#isSuccess\r\rI hold the response that was unsuccessful.\r\rPart of Zinc HTTP Components. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '106' ],
		#self : OmReference [ '107' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnMissingHost\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnMissingHost,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnMissingHost class\r\tslots: {}'
				},
				#name : #'ZnMissingHost class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnMissingHost
				},
				#parent : @6,
				#content : 'ZnMissingHost is signalled when a host should be specified but was not.\r\rPart of Zinc HTTP Components. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '107' ],
		#self : OmReference [ '108' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ZnParseError,
				#definitionSource : 'ZnParseError << #ZnLineTooLong\r\tslots: { #limit };\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnLineTooLong,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnLineTooLong
					},
					#name : #limit,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ZnParseError class << ZnLineTooLong class\r\tslots: {}'
				},
				#name : #'ZnLineTooLong class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnLineTooLong
				},
				#parent : @6,
				#content : 'ZnLineTooLong is signalled when an HTTP CRLF terminated input line exceeds a predefined limit.\r\rPart of Zinc HTTP Components. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '108' ],
		#self : OmReference [ '109' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ZnParseError,
				#definitionSource : 'ZnParseError << #ZnUnknownHttpMethod\r\tslots: { #method };\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnUnknownHttpMethod,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnUnknownHttpMethod
					},
					#name : #method,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ZnParseError class << ZnUnknownHttpMethod class\r\tslots: {}'
				},
				#name : #'ZnUnknownHttpMethod class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnUnknownHttpMethod
				},
				#parent : @6,
				#content : 'ZnUnknownHttpMethod is signalled when an unknown/unsupported HTTP method is found while parsing a request.\r\rI am resumable to allow non-standard methods.\r\rPart of Zinc HTTP Components. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '109' ],
		#self : OmReference [ '110' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ZnParseError,
				#definitionSource : 'ZnParseError << #ZnUnknownHttpStatusCode\r\tslots: { #code };\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnUnknownHttpStatusCode,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnUnknownHttpStatusCode
					},
					#name : #code,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ZnParseError class << ZnUnknownHttpStatusCode class\r\tslots: {}'
				},
				#name : #'ZnUnknownHttpStatusCode class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnUnknownHttpStatusCode
				},
				#parent : @6,
				#content : 'ZnUnknownHttpStatusCode is signalled when an unknown/unsupported HTTP status code is found.\r\rPart of Zinc HTTP Components. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '110' ],
		#self : OmReference [ '111' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #ZnParseError,
				#definitionSource : 'ZnParseError << #ZnUnknownHttpVersion\r\tslots: { #version };\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnUnknownHttpVersion,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnUnknownHttpVersion
					},
					#name : #version,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'ZnParseError class << ZnUnknownHttpVersion class\r\tslots: {}'
				},
				#name : #'ZnUnknownHttpVersion class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnUnknownHttpVersion
				},
				#parent : @6,
				#content : 'ZnUnknownHttpVersion is signalled when an unknown/unsupported HTTP version is found.\r\rPart of Zinc HTTP Components. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '111' ],
		#self : OmReference [ '112' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnParseError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnParseError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnParseError class\r\tslots: {}'
				},
				#name : #'ZnParseError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnParseError
				},
				#parent : @6,
				#content : 'ZnParseError is the superclass of all Zinc HTTP parsing related errors.\r\rPart of Zinc HTTP Components.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '112' ],
		#self : OmReference [ '113' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnTooManyConcurrentConnections\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnTooManyConcurrentConnections,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnTooManyConcurrentConnections class\r\tslots: {}'
				},
				#name : #'ZnTooManyConcurrentConnections class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnTooManyConcurrentConnections
				},
				#parent : @6,
				#content : 'ZnTooManyConcurrentConnections is signalled when the maximum number of concurrent connections of an HTTP Server is reached.\r\rWhen this threshold is reached, a 503 Service Unavailable response will be sent after which the connection will be closed.\r\rPart of Zinc HTTP Components.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '113' ],
		#self : OmReference [ '114' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnTooManyRedirects\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnTooManyRedirects,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnTooManyRedirects class\r\tslots: {}'
				},
				#name : #'ZnTooManyRedirects class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnTooManyRedirects
				},
				#parent : @6,
				#content : 'ZnTooManyRedirects is signalled when an HTTP client has been following more redirects than allowed.\r\rPart of Zinc HTTP Components. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '114' ],
		#self : OmReference [ '115' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZnUnexpectedContentType\r\tslots: { #expectedContentType . #actualContentType };\r\ttag: \'Exceptions\';\r\tpackage: \'Zinc-HTTP\''
			},
			#name : #ZnUnexpectedContentType,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnUnexpectedContentType
					},
					#name : #expectedContentType,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ZnUnexpectedContentType
					},
					#name : #actualContentType,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZnUnexpectedContentType class\r\tslots: {}'
				},
				#name : #'ZnUnexpectedContentType class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZnUnexpectedContentType
				},
				#parent : @6,
				#content : 'ZnUnexpectedContentType is signalled when a different content type (mime type) was expected.\r\rI hold the expected and actual content types.\r\rPart of Zinc HTTP Components. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zinc-HTTP,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '115' ],
		#self : OmReference [ '116' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ZdcPluginMissing\r\tslots: {};\r\tpackage: \'Zodiac-Core\''
			},
			#name : #ZdcPluginMissing,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ZdcPluginMissing class\r\tslots: {}'
				},
				#name : #'ZdcPluginMissing class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ZdcPluginMissing
				},
				#parent : @6,
				#content : 'I am ZdcPluginMissing, signaled when a plugin required by Zodiac is missing.\r\rYou can find more information on Zodiac\'s website\r\r\thttp://zdc.stfx.eu',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Zodiac-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '116' ],
		#self : OmReference [ '117' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #StartupPreferencesLoadingError\r\tslots: {};\r\tpackage: \'StartupPreferences\''
			},
			#name : #StartupPreferencesLoadingError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << StartupPreferencesLoadingError class\r\tslots: {}'
				},
				#name : #'StartupPreferencesLoadingError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #StartupPreferencesLoadingError
				},
				#parent : @6,
				#content : 'I represent an unrecoverable exceptional event while trying to load preferences during startup. I should be handled by the public methods of StartupPreferencesLoader.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #StartupPreferences,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '117' ],
		#self : OmReference [ '118' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #MetacelloError,
				#definitionSource : 'MetacelloError << #MetacelloNameNotDefinedError\r\tslots: {};\r\ttag: \'Exceptions-Errors\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloNameNotDefinedError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'MetacelloError class << MetacelloNameNotDefinedError class\r\tslots: {}'
				},
				#name : #'MetacelloNameNotDefinedError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloNameNotDefinedError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '118' ],
		#self : OmReference [ '119' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #MetacelloError,
				#definitionSource : 'MetacelloError << #MetacelloPackageSpecResolutionError\r\tslots: { #packageSpec . #repositories . #repositoryError };\r\ttag: \'Exceptions-Errors\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloPackageSpecResolutionError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MetacelloPackageSpecResolutionError
					},
					#name : #packageSpec,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MetacelloPackageSpecResolutionError
					},
					#name : #repositories,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MetacelloPackageSpecResolutionError
					},
					#name : #repositoryError,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'MetacelloError class << MetacelloPackageSpecResolutionError class\r\tslots: {}'
				},
				#name : #'MetacelloPackageSpecResolutionError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloPackageSpecResolutionError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '119' ],
		#self : OmReference [ '120' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #MetacelloProjectSpecLoadError,
				#definitionSource : 'MetacelloProjectSpecLoadError << #MetacelloProjectSpecLoadConflict\r\tslots: {};\r\ttag: \'Exceptions-Errors\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloProjectSpecLoadConflict,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'MetacelloProjectSpecLoadError class << MetacelloProjectSpecLoadConflict class\r\tslots: {}'
				},
				#name : #'MetacelloProjectSpecLoadConflict class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloProjectSpecLoadConflict
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '120' ],
		#self : OmReference [ '121' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #MetacelloError,
				#definitionSource : 'MetacelloError << #MetacelloProjectSpecLoadError\r\tslots: { #projectSpec . #versionDoesNotExistException };\r\ttag: \'Exceptions-Errors\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloProjectSpecLoadError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MetacelloProjectSpecLoadError
					},
					#name : #projectSpec,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MetacelloProjectSpecLoadError
					},
					#name : #versionDoesNotExistException,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'MetacelloError class << MetacelloProjectSpecLoadError class\r\tslots: {}'
				},
				#name : #'MetacelloProjectSpecLoadError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloProjectSpecLoadError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '121' ],
		#self : OmReference [ '122' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #MetacelloError,
				#definitionSource : 'MetacelloError << #MetacelloValidationFailure\r\tslots: { #issues };\r\ttag: \'Exceptions-Errors\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloValidationFailure,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MetacelloValidationFailure
					},
					#name : #issues,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'MetacelloError class << MetacelloValidationFailure class\r\tslots: {}'
				},
				#name : #'MetacelloValidationFailure class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloValidationFailure
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '122' ],
		#self : OmReference [ '123' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #MetacelloSymbolicVersionDoesNotExistError,
				#definitionSource : 'MetacelloSymbolicVersionDoesNotExistError << #MetacelloSymbolicVersionNotDefinedError\r\tslots: {};\r\ttag: \'Exceptions-Errors\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloSymbolicVersionNotDefinedError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'MetacelloSymbolicVersionDoesNotExistError class << MetacelloSymbolicVersionNotDefinedError class\r\tslots: {}'
				},
				#name : #'MetacelloSymbolicVersionNotDefinedError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloSymbolicVersionNotDefinedError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '123' ],
		#self : OmReference [ '124' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #MetacelloVersionDoesNotExistError,
				#definitionSource : 'MetacelloVersionDoesNotExistError << #MetacelloSymbolicVersionDoesNotExistError\r\tslots: {};\r\ttag: \'Exceptions-Errors\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloSymbolicVersionDoesNotExistError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'MetacelloVersionDoesNotExistError class << MetacelloSymbolicVersionDoesNotExistError class\r\tslots: {}'
				},
				#name : #'MetacelloSymbolicVersionDoesNotExistError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloSymbolicVersionDoesNotExistError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '124' ],
		#self : OmReference [ '125' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #MetacelloVersionDoesNotExistError,
				#definitionSource : 'MetacelloVersionDoesNotExistError << #MetacelloVersionDefinitionError\r\tslots: { #exception };\r\ttag: \'Exceptions-Errors\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloVersionDefinitionError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MetacelloVersionDefinitionError
					},
					#name : #exception,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'MetacelloVersionDoesNotExistError class << MetacelloVersionDefinitionError class\r\tslots: {}'
				},
				#name : #'MetacelloVersionDefinitionError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloVersionDefinitionError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '125' ],
		#self : OmReference [ '126' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #MetacelloError,
				#definitionSource : 'MetacelloError << #MetacelloVersionDoesNotExistError\r\tslots: { #project . #versionString };\r\ttag: \'Exceptions-Errors\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloVersionDoesNotExistError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MetacelloVersionDoesNotExistError
					},
					#name : #project,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MetacelloVersionDoesNotExistError
					},
					#name : #versionString,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'MetacelloError class << MetacelloVersionDoesNotExistError class\r\tslots: {}'
				},
				#name : #'MetacelloVersionDoesNotExistError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloVersionDoesNotExistError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '126' ],
		#self : OmReference [ '127' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MetacelloError\r\tslots: {};\r\ttag: \'Exceptions-Errors\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MetacelloError class\r\tslots: {}'
				},
				#name : #'MetacelloError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '127' ],
		#self : OmReference [ '128' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #MetacelloScriptingError,
				#definitionSource : 'MetacelloScriptingError << #MetacelloConflictingProjectError\r\tslots: {};\r\ttag: \'Scripts\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloConflictingProjectError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'MetacelloScriptingError class << MetacelloConflictingProjectError class\r\tslots: {}'
				},
				#name : #'MetacelloConflictingProjectError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloConflictingProjectError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Scripts,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '128' ],
		#self : OmReference [ '129' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MetacelloScriptingError\r\tslots: {};\r\ttag: \'Scripts\';\r\tpackage: \'Metacello-Core\''
			},
			#name : #MetacelloScriptingError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MetacelloScriptingError class\r\tslots: {}'
				},
				#name : #'MetacelloScriptingError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MetacelloScriptingError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Metacello-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Scripts,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '129' ],
		#self : OmReference [ '130' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #STONReaderError\r\tslots: { #streamPosition };\r\ttag: \'Reader\';\r\tpackage: \'STON-Core\''
			},
			#name : #STONReaderError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #STONReaderError
					},
					#name : #streamPosition,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << STONReaderError class\r\tslots: {}'
				},
				#name : #'STONReaderError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #STONReaderError
				},
				#parent : @6,
				#content : 'STONReaderError is the error/exception signalled by STONReader when illegal/incorrect input is seen. \r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #STON-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Reader,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '130' ],
		#self : OmReference [ '131' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #STONWriterError\r\tslots: {};\r\ttag: \'Writer\';\r\tpackage: \'STON-Core\''
			},
			#name : #STONWriterError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << STONWriterError class\r\tslots: {}'
				},
				#name : #'STONWriterError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #STONWriterError
				},
				#parent : @6,
				#content : 'STONWriterError is the error/exception signalled by STONWriter when illegal/incorrect input is seen. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #STON-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Writer,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '131' ],
		#self : OmReference [ '132' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #TonelParseError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'MonticelloTonel-Core\''
			},
			#name : #TonelParseError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << TonelParseError class\r\tslots: {}'
				},
				#name : #'TonelParseError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TonelParseError
				},
				#parent : @6,
				#content : 'I\'m a parsing error. \rI happen whenever the parsing of a tonel file is broken in someway.',
				#stamp : 'EstebanLorenzano 9/11/2017 11:53'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #MonticelloTonel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '132' ],
		#self : OmReference [ '133' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #TonelWriteError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'MonticelloTonel-Core\''
			},
			#name : #TonelWriteError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << TonelWriteError class\r\tslots: {}'
				},
				#name : #'TonelWriteError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TonelWriteError
				},
				#parent : @6,
				#content : 'I\'m a writing error.\rI happen whenever an unrecoverable problem was encountered during writing of tonel.',
				#stamp : 'PeterUhnak 10/7/2018 16:50'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #MonticelloTonel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '133' ],
		#self : OmReference [ '134' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #DirtyTestError,
				#definitionSource : 'DirtyTestError << #TestFailedByForkedProcess\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'SUnit-Core\''
			},
			#name : #TestFailedByForkedProcess,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'DirtyTestError class << TestFailedByForkedProcess class\r\tslots: {}'
				},
				#name : #'TestFailedByForkedProcess class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TestFailedByForkedProcess
				},
				#parent : @6,
				#content : 'I notify users about failed processes which were forked during the test.\rI prevent the test to complete successfully when there was no errors from the main test process but some of background activities fail.\r\rIn practice I ensure no green tests which "spawn background debuggers"',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #SUnit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '134' ],
		#self : OmReference [ '135' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #DirtyTestError,
				#definitionSource : 'DirtyTestError << #TestLeftRunningProcess\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'SUnit-Core\''
			},
			#name : #TestLeftRunningProcess,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'DirtyTestError class << TestLeftRunningProcess class\r\tslots: {}'
				},
				#name : #'TestLeftRunningProcess class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TestLeftRunningProcess
				},
				#parent : @6,
				#content : 'I notify users about dirty system state when test left running background processes. \rThe process left running after the test could affect the execution of other tests and generally it could break the system when test suite is complete\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #SUnit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '135' ],
		#self : OmReference [ '136' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #DirtyTestError\r\tslots: { #executionEnvironment };\r\ttag: \'Kernel\';\r\tpackage: \'SUnit-Core\''
			},
			#name : #DirtyTestError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #DirtyTestError
					},
					#name : #executionEnvironment,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << DirtyTestError class\r\tslots: {}'
				},
				#name : #'DirtyTestError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #DirtyTestError
				},
				#parent : @6,
				#content : 'I am a root of hierarchy of errors which represent the dirty state of system produced by test.\rFor example the test can left the running background process or background process can raise an error.\r\rTestExecutionEnvironment checks the system state at the end of test and concrete error is raised if dirty state is detected. \rThose errors are signalled even if test was failed due to domain error. In that case when domain error is handled by SUnit (marking the test result as failed) the another error is signaled to notify about bad system state',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #SUnit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '136' ],
		#self : OmReference [ '137' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #TestTookTooMuchTime\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'SUnit-Core\''
			},
			#name : #TestTookTooMuchTime,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << TestTookTooMuchTime class\r\tslots: {}'
				},
				#name : #'TestTookTooMuchTime class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TestTookTooMuchTime
				},
				#parent : @6,
				#content : 'I am special error to signal that test exceed time limit.\r\rTestCase subclass can reimplement defaultTimeLimit in its class side to specify another duration.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #SUnit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '137' ],
		#self : OmReference [ '138' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MyResumableTestError\r\tslots: {};\r\ttag: \'Exception\';\r\tpackage: \'Kernel-Tests\''
			},
			#name : #MyResumableTestError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MyResumableTestError class\r\tslots: {}'
				},
				#name : #'MyResumableTestError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MyResumableTestError
				},
				#parent : @6,
				#content : 'A resumable error for tests',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-Tests,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exception,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '138' ],
		#self : OmReference [ '139' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MyTestError\r\tslots: {};\r\ttag: \'Exception\';\r\tpackage: \'Kernel-Tests\''
			},
			#name : #MyTestError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MyTestError class\r\tslots: {}'
				},
				#name : #'MyTestError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MyTestError
				},
				#parent : @6,
				#content : 'An error for tests',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel-Tests,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exception,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '139' ],
		#self : OmReference [ '140' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #NonObservableSlotError\r\tslots: {};\r\ttag: \'Observable\';\r\tpackage: \'VariablesLibrary\''
			},
			#name : #NonObservableSlotError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << NonObservableSlotError class\r\tslots: {}'
				},
				#name : #'NonObservableSlotError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #NonObservableSlotError
				},
				#parent : @6,
				#content : 'I am an error raised when a user try to interact with a slot as an observable slot, but this slot is not observable.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #VariablesLibrary,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Observable,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '140' ],
		#self : OmReference [ '141' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #TKTCancelledTaskException\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'TaskIt\''
			},
			#name : #TKTCancelledTaskException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << TKTCancelledTaskException class\r\tslots: {}'
				},
				#name : #'TKTCancelledTaskException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TKTCancelledTaskException
				},
				#parent : @6,
				#content : 'I am an exception used to represent the cancellation of a task.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #TaskIt,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '141' ],
		#self : OmReference [ '142' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #TKTRetryException\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'TaskIt\''
			},
			#name : #TKTRetryException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << TKTRetryException class\r\tslots: {}'
				},
				#name : #'TKTRetryException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TKTRetryException
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #TaskIt,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '142' ],
		#self : OmReference [ '143' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #TKTTimeoutException\r\tslots: {};\r\ttag: \'Futures\';\r\tpackage: \'TaskIt\''
			},
			#name : #TKTTimeoutException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << TKTTimeoutException class\r\tslots: {}'
				},
				#name : #'TKTTimeoutException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TKTTimeoutException
				},
				#parent : @6,
				#content : 'I am an exception thrown when there is a timeout while waiting for the synchronization of a future.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #TaskIt,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Futures,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '143' ],
		#self : OmReference [ '144' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #FFIDereferencedOpaqueObjectError\r\tslots: {};\r\ttag: \'Types-Exceptions\';\r\tpackage: \'UnifiedFFI\''
			},
			#name : #FFIDereferencedOpaqueObjectError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << FFIDereferencedOpaqueObjectError class\r\tslots: {}'
				},
				#name : #'FFIDereferencedOpaqueObjectError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FFIDereferencedOpaqueObjectError
				},
				#parent : @6,
				#content : 'I indicate that user tried to access an opaque type in a derreferenced way.\rOpaque types can just be accessed by reference (as a pointer to them). \r\rExample:\rself ffiCall: #( void function(FFIOpaqueObject  *var)  "Correct"\r\rself ffiCall: #( void function(FFIOpaqueObject  var)  "WRONG"\r\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #UnifiedFFI,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Types-Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '144' ],
		#self : OmReference [ '145' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #FFIUnsupportedUntypedLiteral\r\tslots: { #literal };\r\ttag: \'Exceptions\';\r\tpackage: \'UnifiedFFI\''
			},
			#name : #FFIUnsupportedUntypedLiteral,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #FFIUnsupportedUntypedLiteral
					},
					#name : #literal,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << FFIUnsupportedUntypedLiteral class\r\tslots: {}'
				},
				#name : #'FFIUnsupportedUntypedLiteral class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FFIUnsupportedUntypedLiteral
				},
				#parent : @6,
				#content : 'I am an error indicating that an unsupported untyped literal has been used.\rI contain the unsupported literal so the user can query me.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #UnifiedFFI,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '145' ],
		#self : OmReference [ '146' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLError,
				#definitionSource : 'FLError << #FLConfigurationError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLConfigurationError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLError class << FLConfigurationError class\r\tslots: {}'
				},
				#name : #'FLConfigurationError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLConfigurationError
				},
				#parent : @6,
				#content : 'I represent an error caused by invalid configuration.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '146' ],
		#self : OmReference [ '147' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLMaterializationError,
				#definitionSource : 'FLMaterializationError << #FLBadSignature\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLBadSignature,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLMaterializationError class << FLBadSignature class\r\tslots: {}'
				},
				#name : #'FLBadSignature class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLBadSignature
				},
				#parent : @6,
				#content : 'I represent an error produced during materialization when the serialized signature doesn\'t match the materializer\'s signature (accessible via FLMaterializer>>signature). A signature is a byte prefix that should prefix a well-serialized stream.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '147' ],
		#self : OmReference [ '148' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLMaterializationError,
				#definitionSource : 'FLMaterializationError << #FLBadVersion\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLBadVersion,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLMaterializationError class << FLBadVersion class\r\tslots: {}'
				},
				#name : #'FLBadVersion class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLBadVersion
				},
				#parent : @6,
				#content : 'I represent an error produced during materialization when the serialized version doesn\'t match the materializer\'s version (accessible via FLMaterializer>>version). A version is encoded in 16 bits and is enconded heading the serialized stream, after the signature.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '148' ],
		#self : OmReference [ '149' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLMaterializationError,
				#definitionSource : 'FLMaterializationError << #FLClassNotFound\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLClassNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLMaterializationError class << FLClassNotFound class\r\tslots: {}'
				},
				#name : #'FLClassNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLClassNotFound
				},
				#parent : @6,
				#content : 'I represent an error produced during materialization when a serialized class or trait name doesn\'t exist.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '149' ],
		#self : OmReference [ '150' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLMaterializationError,
				#definitionSource : 'FLMaterializationError << #FLGlobalNotFound\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLGlobalNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLMaterializationError class << FLGlobalNotFound class\r\tslots: {}'
				},
				#name : #'FLGlobalNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLGlobalNotFound
				},
				#parent : @6,
				#content : 'I represent an error produced during materialization when a serialized global name doesn\'t exist (at Smalltalk globals).',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '150' ],
		#self : OmReference [ '151' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLMaterializationError,
				#definitionSource : 'FLMaterializationError << #FLMethodChanged\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLMethodChanged,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLMaterializationError class << FLMethodChanged class\r\tslots: {}'
				},
				#name : #'FLMethodChanged class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLMethodChanged
				},
				#parent : @6,
				#content : 'I represent an error produced during materialization when is detected a change in the bytecodes of a method serialized as global. \r\rThis error was born when testing the materialization of a BlockClosure defined in a method that changed. The test produced a VM crash.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '151' ],
		#self : OmReference [ '152' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLMaterializationError,
				#definitionSource : 'FLMaterializationError << #FLMethodNotFound\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLMethodNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLMaterializationError class << FLMethodNotFound class\r\tslots: {}'
				},
				#name : #'FLMethodNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLMethodNotFound
				},
				#parent : @6,
				#content : 'I represent an error produced during materialization when a serialized method in a class or trait name doesn\'t exist (at Smalltalk globals).',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '152' ],
		#self : OmReference [ '153' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLError,
				#definitionSource : 'FLError << #FLMaterializationError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLMaterializationError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLError class << FLMaterializationError class\r\tslots: {}'
				},
				#name : #'FLMaterializationError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLMaterializationError
				},
				#parent : @6,
				#content : 'I represent an error happened during materialization.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '153' ],
		#self : OmReference [ '154' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLSerializationError,
				#definitionSource : 'FLSerializationError << #FLNotSerializable\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLNotSerializable,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLSerializationError class << FLNotSerializable class\r\tslots: {}'
				},
				#name : #'FLNotSerializable class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLNotSerializable
				},
				#parent : @6,
				#content : 'I represent an error which may happen while tracing in the graph an object that is forbidden of being serialized.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '154' ],
		#self : OmReference [ '155' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLSerializationError,
				#definitionSource : 'FLSerializationError << #FLObjectNotFound\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLObjectNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLSerializationError class << FLObjectNotFound class\r\tslots: {}'
				},
				#name : #'FLObjectNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLObjectNotFound
				},
				#parent : @6,
				#content : 'I represent an error which may happen during serialization, when trying to encode on the stream a reference to an object that should be encoded before, but it is not.\r\rThis usually happens when the graph changes during serialization. \r\rAnother possible cause is a bug in the analysis step of serialization.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '155' ],
		#self : OmReference [ '156' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLSerializationError,
				#definitionSource : 'FLSerializationError << #FLObsolete\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLObsolete,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLSerializationError class << FLObsolete class\r\tslots: {}'
				},
				#name : #'FLObsolete class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLObsolete
				},
				#parent : @6,
				#content : 'I am an error produced during serialization, signaled when trying to serialize an obsolete class as global. It is a prevention, because such class is lekely to be absent during materialization.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '156' ],
		#self : OmReference [ '157' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #FLError,
				#definitionSource : 'FLError << #FLSerializationError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLSerializationError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'FLError class << FLSerializationError class\r\tslots: {}'
				},
				#name : #'FLSerializationError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLSerializationError
				},
				#parent : @6,
				#content : 'I represent an error happened during serialization.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '157' ],
		#self : OmReference [ '158' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #FLError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Fuel-Core\''
			},
			#name : #FLError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << FLError class\r\tslots: {}'
				},
				#name : #'FLError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FLError
				},
				#parent : @6,
				#content : 'I represent an error produced during Fuel operation.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Fuel-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '158' ],
		#self : OmReference [ '159' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #FT2Error\r\tslots: { #errorCode . #errorString };\r\ttag: \'Base\';\r\tpackage: \'FreeType\''
			},
			#name : #FT2Error,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #FT2Error
					},
					#name : #errorCode,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #FT2Error
					},
					#name : #errorString,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << FT2Error class\r\tslots: {}'
				},
				#name : #'FT2Error class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #FT2Error
				},
				#parent : @6,
				#content : 'This is an Error that knows how to get the Freetype2 error code and string.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #FreeType,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Base,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '159' ],
		#self : OmReference [ '160' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #RegexError,
				#definitionSource : 'RegexError << #RegexCompilationError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Regex-Core\''
			},
			#name : #RegexCompilationError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'RegexError class << RegexCompilationError class\r\tslots: {}'
				},
				#name : #'RegexCompilationError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RegexCompilationError
				},
				#parent : @6,
				#content : 'This class represents compilation errors in regular expressions.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Regex-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '160' ],
		#self : OmReference [ '161' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #RegexError,
				#definitionSource : 'RegexError << #RegexMatchingError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Regex-Core\''
			},
			#name : #RegexMatchingError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'RegexError class << RegexMatchingError class\r\tslots: {}'
				},
				#name : #'RegexMatchingError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RegexMatchingError
				},
				#parent : @6,
				#content : 'This class represents matching errors in regular expressions.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Regex-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '161' ],
		#self : OmReference [ '162' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #RegexError,
				#definitionSource : 'RegexError << #RegexSyntaxError\r\tslots: { #position };\r\ttag: \'Exceptions\';\r\tpackage: \'Regex-Core\''
			},
			#name : #RegexSyntaxError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #RegexSyntaxError
					},
					#name : #position,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'RegexError class << RegexSyntaxError class\r\tslots: {}'
				},
				#name : #'RegexSyntaxError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RegexSyntaxError
				},
				#parent : @6,
				#content : 'This class represents syntax errors in regular expressions.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Regex-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '162' ],
		#self : OmReference [ '163' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #RegexError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Regex-Core\''
			},
			#name : #RegexError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << RegexError class\r\tslots: {}'
				},
				#name : #'RegexError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RegexError
				},
				#parent : @6,
				#content : 'This is a common superclass for errors in regular expressions.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Regex-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '163' ],
		#self : OmReference [ '164' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #TabWithNoContentsMorph\r\tslots: { #tab };\r\ttag: \'Support\';\r\tpackage: \'Morphic-Widgets-Tabs\''
			},
			#name : #TabWithNoContentsMorph,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #TabWithNoContentsMorph
					},
					#name : #tab,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << TabWithNoContentsMorph class\r\tslots: {}'
				},
				#name : #'TabWithNoContentsMorph class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TabWithNoContentsMorph
				},
				#parent : @6,
				#content : 'Error raised when a tab is asked its contents but have no morph and no retrieving block, or the retrieving block is returning nil.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Morphic-Widgets-Tabs,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Support,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '164' ],
		#self : OmReference [ '165' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #CmCommandError,
				#definitionSource : 'CmCommandError << #CmCommandAborted\r\tslots: { #reason };\r\ttag: \'Errors\';\r\tpackage: \'Commander2\''
			},
			#name : #CmCommandAborted,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #CmCommandAborted
					},
					#name : #reason,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'CmCommandError class << CmCommandAborted class\r\tslots: {}'
				},
				#name : #'CmCommandAborted class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CmCommandAborted
				},
				#parent : @6,
				#content : 'I am raised when the execution of a command has been aborted.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Commander2,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '165' ],
		#self : OmReference [ '166' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #CmCommandError,
				#definitionSource : 'CmCommandError << #CmNoShortcutIsDefined\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Commander2\''
			},
			#name : #CmNoShortcutIsDefined,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'CmCommandError class << CmNoShortcutIsDefined class\r\tslots: {}'
				},
				#name : #'CmNoShortcutIsDefined class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CmNoShortcutIsDefined
				},
				#parent : @6,
				#content : 'I am raised when no shortcut is defined for a LtSpecCommand but #shortcutKey has been called.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Commander2,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '166' ],
		#self : OmReference [ '167' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #CmCommandError\r\tslots: { #command };\r\ttag: \'Errors\';\r\tpackage: \'Commander2\''
			},
			#name : #CmCommandError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #CmCommandError
					},
					#name : #command,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << CmCommandError class\r\tslots: {}'
				},
				#name : #'CmCommandError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CmCommandError
				},
				#parent : @6,
				#content : 'I am an abstract error that can be thrown by a command.\r\rI hold the command that generated myself in my #command inst. var.\r\rOne can create an instance of myself like this:\r[[[\rLtCommandError command: LtCommand new\r]]]\r\rOne can create an instance of myself and directly signal it like this:\r[[[\rLtCommandError signalCommand: LtCommand new\r]]]',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Commander2,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '167' ],
		#self : OmReference [ '168' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #CmDuplicatedEntryName\r\tslots: { #entryName };\r\ttag: \'Errors\';\r\tpackage: \'Commander2\''
			},
			#name : #CmDuplicatedEntryName,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #CmDuplicatedEntryName
					},
					#name : #entryName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << CmDuplicatedEntryName class\r\tslots: {}'
				},
				#name : #'CmDuplicatedEntryName class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CmDuplicatedEntryName
				},
				#parent : @6,
				#content : 'I am the error raised when one tries add an entry in registry for which the name already exists.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Commander2,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '168' ],
		#self : OmReference [ '169' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #SpCancelledInteractionError,
				#definitionSource : 'SpCancelledInteractionError << #SpInteractionCancelled\r\tslots: {};\r\tpackage: \'Spec2-Interactions\''
			},
			#name : #SpInteractionCancelled,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'SpCancelledInteractionError class << SpInteractionCancelled class\r\tslots: {}'
				},
				#name : #'SpInteractionCancelled class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SpInteractionCancelled
				},
				#parent : @6,
				#content : 'I am the error raised when the user cancelled a request.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Spec2-Interactions,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '169' ],
		#self : OmReference [ '170' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #SpInteractionError,
				#definitionSource : 'SpInteractionError << #SpCancelledInteractionError\r\tslots: {};\r\tpackage: \'Spec2-Interactions\''
			},
			#name : #SpCancelledInteractionError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'SpInteractionError class << SpCancelledInteractionError class\r\tslots: {}'
				},
				#name : #'SpCancelledInteractionError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SpCancelledInteractionError
				},
				#parent : @6,
				#content : 'I am the error raised when the user cancelled a request.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Spec2-Interactions,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '170' ],
		#self : OmReference [ '171' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #SpInvalidUserInputError,
				#definitionSource : 'SpInvalidUserInputError << #SpInvalidUserInput\r\tslots: {};\r\tpackage: \'Spec2-Interactions\''
			},
			#name : #SpInvalidUserInput,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'SpInvalidUserInputError class << SpInvalidUserInput class\r\tslots: {}'
				},
				#name : #'SpInvalidUserInput class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SpInvalidUserInput
				},
				#parent : @6,
				#content : 'I am the error raised when a user entered bad input during interaction.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Spec2-Interactions,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '171' ],
		#self : OmReference [ '172' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #SpInteractionError,
				#definitionSource : 'SpInteractionError << #SpInvalidUserInputError\r\tslots: {};\r\tpackage: \'Spec2-Interactions\''
			},
			#name : #SpInvalidUserInputError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'SpInteractionError class << SpInvalidUserInputError class\r\tslots: {}'
				},
				#name : #'SpInvalidUserInputError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SpInvalidUserInputError
				},
				#parent : @6,
				#content : 'I am the error raised when a user entered bad input during interaction.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Spec2-Interactions,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '172' ],
		#self : OmReference [ '173' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #SpInteractionError\r\tslots: {};\r\tpackage: \'Spec2-Interactions\''
			},
			#name : #SpInteractionError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << SpInteractionError class\r\tslots: {}'
				},
				#name : #'SpInteractionError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SpInteractionError
				},
				#parent : @6,
				#content : 'I model an abstract interaction error.\r\rThese errors are raised when an interaction with a user did not end well.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Spec2-Interactions,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '173' ],
		#self : OmReference [ '174' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #RBRefactoringError,
				#definitionSource : 'RBRefactoringError << #RBApplicabilityChecksFailedError\r\tslots: {};\r\ttag: \'Support\';\r\tpackage: \'Refactoring-Core\''
			},
			#name : #RBApplicabilityChecksFailedError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'RBRefactoringError class << RBApplicabilityChecksFailedError class\r\tslots: {}'
				},
				#name : #'RBApplicabilityChecksFailedError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RBApplicabilityChecksFailedError
				},
				#parent : @6,
				#content : 'I represent an Error that is signaled when applicability checks are not met.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Refactoring-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Support,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '174' ],
		#self : OmReference [ '175' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #RBRefactoringError\r\tslots: { #failedPreconditions };\r\ttag: \'Support\';\r\tpackage: \'Refactoring-Core\''
			},
			#name : #RBRefactoringError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #RBRefactoringError
					},
					#name : #failedPreconditions,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << RBRefactoringError class\r\tslots: {}'
				},
				#name : #'RBRefactoringError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RBRefactoringError
				},
				#parent : @6,
				#content : 'The receiver is signaled whenever a precondition of a refactoring is violated.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Refactoring-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Support,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '175' ],
		#self : OmReference [ '176' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #AINotADAG\r\tslots: {};\r\ttag: \'Topological Sorting\';\r\tpackage: \'AI-Algorithms-Graph\''
			},
			#name : #AINotADAG,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << AINotADAG class\r\tslots: {}'
				},
				#name : #'AINotADAG class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #AINotADAG
				},
				#parent : @6,
				#content : 'I am raised when an algorithm should have run on a DAG but the collection was not a DAG.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #AI-Algorithms-Graph,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #'Topological Sorting',
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '176' ],
		#self : OmReference [ '177' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #SDL2Error\r\tslots: {};\r\ttag: \'Bindings\';\r\tpackage: \'OSWindow-SDL2\''
			},
			#name : #SDL2Error,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << SDL2Error class\r\tslots: {}'
				},
				#name : #'SDL2Error class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SDL2Error
				},
				#parent : @6,
				#content : 'I am the Pharo Local Exception return that something wrong in SDL2',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #OSWindow-SDL2,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Bindings,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '177' ],
		#self : OmReference [ '178' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #OmFileStoreReadingError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Ombu\''
			},
			#name : #OmFileStoreReadingError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << OmFileStoreReadingError class\r\tslots: {}'
				},
				#name : #'OmFileStoreReadingError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #OmFileStoreReadingError
				},
				#parent : @6,
				#content : 'I am a notification raised when a OmFileStore has a problem reading an entry from its file.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Ombu,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '178' ],
		#self : OmReference [ '179' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #OmFileStoreWritingError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Ombu\''
			},
			#name : #OmFileStoreWritingError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << OmFileStoreWritingError class\r\tslots: {}'
				},
				#name : #'OmFileStoreWritingError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #OmFileStoreWritingError
				},
				#parent : @6,
				#content : 'I am a notification raised when a OmFileStore has a problem writing an entry into its file.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Ombu,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '179' ],
		#self : OmReference [ '180' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #UndefinedClassError\r\tslots: {};\r\ttag: \'Core\';\r\tpackage: \'UndefinedClasses\''
			},
			#name : #UndefinedClassError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << UndefinedClassError class\r\tslots: {}'
				},
				#name : #'UndefinedClassError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #UndefinedClassError
				},
				#parent : @6,
				#content : 'I\'m an error signaled when an UndefinedClass received an unknown message or try to initialize instance.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #UndefinedClasses,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Core,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '180' ],
		#self : OmReference [ '181' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #CmdCommandAborted\r\tslots: {};\r\tpackage: \'Commander-Core\''
			},
			#name : #CmdCommandAborted,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << CmdCommandAborted class\r\tslots: {}'
				},
				#name : #'CmdCommandAborted class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CmdCommandAborted
				},
				#parent : @6,
				#content : 'I am exception which used to break command execution. \rUsually I am signalled during command preparation when user declines UI request ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Commander-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '181' ],
		#self : OmReference [ '182' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ClyNoChildrenError\r\tslots: { #parent };\r\ttag: \'Exceptions\';\r\tpackage: \'Calypso-Browser\''
			},
			#name : #ClyNoChildrenError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ClyNoChildrenError
					},
					#name : #parent,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ClyNoChildrenError class\r\tslots: {}'
				},
				#name : #'ClyNoChildrenError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ClyNoChildrenError
				},
				#parent : @6,
				#content : 'I am ClyNoChildrenError, an exception indicating that an operation on a parent in a parent-child structure failed due to the absence of child elements. ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Calypso-Browser,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '182' ],
		#self : OmReference [ '183' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #ClyInvalidClassForTestClassGeneration\r\tslots: { #baseClass };\r\ttag: \'Exceptions\';\r\tpackage: \'Calypso-SystemPlugins-SUnit-Browser\''
			},
			#name : #ClyInvalidClassForTestClassGeneration,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #ClyInvalidClassForTestClassGeneration
					},
					#name : #baseClass,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << ClyInvalidClassForTestClassGeneration class\r\tslots: {}'
				},
				#name : #'ClyInvalidClassForTestClassGeneration class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #ClyInvalidClassForTestClassGeneration
				},
				#parent : @6,
				#content : 'Description\r--------------------\r\rI am an exception raised when we want to generate a test class from an invalid class. (For example if the class is a metaclass)',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Calypso-SystemPlugins-SUnit-Browser,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '183' ],
		#self : OmReference [ '184' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #RGBadInstantiationError\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'Ring-Core\''
			},
			#name : #RGBadInstantiationError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << RGBadInstantiationError class\r\tslots: {}'
				},
				#name : #'RGBadInstantiationError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RGBadInstantiationError
				},
				#parent : @6,
				#content : 'I\'m a specialized error exception used for cases where you want to work directly with instances of RGBehavior without assigned behavior strategy',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Ring-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '184' ],
		#self : OmReference [ '185' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #RGIncompatibleBehaviorTypeError\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'Ring-Core\''
			},
			#name : #RGIncompatibleBehaviorTypeError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << RGIncompatibleBehaviorTypeError class\r\tslots: {}'
				},
				#name : #'RGIncompatibleBehaviorTypeError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RGIncompatibleBehaviorTypeError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Ring-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '185' ],
		#self : OmReference [ '186' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #RGJoiningError\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'Ring-Core\''
			},
			#name : #RGJoiningError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << RGJoiningError class\r\tslots: {}'
				},
				#name : #'RGJoiningError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RGJoiningError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Ring-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '186' ],
		#self : OmReference [ '187' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #RGMergeError\r\tslots: { #property . #target . #source };\r\ttag: \'Kernel\';\r\tpackage: \'Ring-Core\''
			},
			#name : #RGMergeError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #RGMergeError
					},
					#name : #property,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #RGMergeError
					},
					#name : #target,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #RGMergeError
					},
					#name : #source,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << RGMergeError class\r\tslots: {}'
				},
				#name : #'RGMergeError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RGMergeError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Ring-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '187' ],
		#self : OmReference [ '188' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #RGNotFoundError\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'Ring-Core\''
			},
			#name : #RGNotFoundError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << RGNotFoundError class\r\tslots: {}'
				},
				#name : #'RGNotFoundError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RGNotFoundError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Ring-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '188' ],
		#self : OmReference [ '189' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #RGResolvingError\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'Ring-Core\''
			},
			#name : #RGResolvingError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << RGResolvingError class\r\tslots: {}'
				},
				#name : #'RGResolvingError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RGResolvingError
				},
				#parent : @6,
				#content : 'I\'m a specialized error exception used mainly during failures in applying of changes on Ring models in cases when you cannot determine to which entity in the model the change should be applied. \r\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Ring-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '189' ],
		#self : OmReference [ '190' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #RGWrongEnvironment\r\tslots: {};\r\ttag: \'Kernel\';\r\tpackage: \'Ring-Core\''
			},
			#name : #RGWrongEnvironment,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << RGWrongEnvironment class\r\tslots: {}'
				},
				#name : #'RGWrongEnvironment class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #RGWrongEnvironment
				},
				#parent : @6,
				#content : 'Trying to add to a model an element from a different environment.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Ring-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Kernel,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '190' ],
		#self : OmReference [ '191' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #DebuggedExecutionException,
				#definitionSource : 'DebuggedExecutionException << #DebuggedExecutionIsFinished\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Sindarin\''
			},
			#name : #DebuggedExecutionIsFinished,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'DebuggedExecutionException class << DebuggedExecutionIsFinished class\r\tslots: {}'
				},
				#name : #'DebuggedExecutionIsFinished class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #DebuggedExecutionIsFinished
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Sindarin,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '191' ],
		#self : OmReference [ '192' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #DebuggedExecutionException,
				#definitionSource : 'DebuggedExecutionException << #UnhandledExceptionSignalledByADebuggedExecution\r\tslots: { #unhandledException };\r\ttag: \'Exceptions\';\r\tpackage: \'Sindarin\''
			},
			#name : #UnhandledExceptionSignalledByADebuggedExecution,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #UnhandledExceptionSignalledByADebuggedExecution
					},
					#name : #unhandledException,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'DebuggedExecutionException class << UnhandledExceptionSignalledByADebuggedExecution class\r\tslots: {}'
				},
				#name : #'UnhandledExceptionSignalledByADebuggedExecution class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #UnhandledExceptionSignalledByADebuggedExecution
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Sindarin,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '192' ],
		#self : OmReference [ '193' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #DebuggedExecutionException\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Sindarin\''
			},
			#name : #DebuggedExecutionException,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << DebuggedExecutionException class\r\tslots: {}'
				},
				#name : #'DebuggedExecutionException class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #DebuggedExecutionException
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Sindarin,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '193' ],
		#self : OmReference [ '194' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #NodeNotInASTError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Sindarin\''
			},
			#name : #NodeNotInASTError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << NodeNotInASTError class\r\tslots: {}'
				},
				#name : #'NodeNotInASTError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #NodeNotInASTError
				},
				#parent : @6,
				#content : 'I am signaled when we try to move the execution to a node that is not in the home context\'s method ast.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Sindarin,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '194' ],
		#self : OmReference [ '195' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #NotValidPcError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Sindarin\''
			},
			#name : #NotValidPcError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << NotValidPcError class\r\tslots: {}'
				},
				#name : #'NotValidPcError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #NotValidPcError
				},
				#parent : @6,
				#content : 'I am signaled when I try to modify the execution of a context to get to an invalid PC (lower than the method initalPC or greater than the method endPC)',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Sindarin,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '195' ],
		#self : OmReference [ '196' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #SteppingATerminatingProcess\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Sindarin\''
			},
			#name : #SteppingATerminatingProcess,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << SteppingATerminatingProcess class\r\tslots: {}'
				},
				#name : #'SteppingATerminatingProcess class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #SteppingATerminatingProcess
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Sindarin,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '196' ],
		#self : OmReference [ '197' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #GeometryError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Geometry\''
			},
			#name : #GeometryError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << GeometryError class\r\tslots: {}'
				},
				#name : #'GeometryError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #GeometryError
				},
				#parent : @6,
				#content : 'Description\r--------------------\r\rI am a common exception for the Geometry project',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Geometry,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '197' ],
		#self : OmReference [ '198' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #StGenerateCode,
				#definitionSource : 'StGenerateCode << #StGenerateAssertEqualsCode\r\tslots: { #result };\r\ttag: \'Model\';\r\tpackage: \'NewTools-Debugger\''
			},
			#name : #StGenerateAssertEqualsCode,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #StGenerateAssertEqualsCode
					},
					#name : #result,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'StGenerateCode class << StGenerateAssertEqualsCode class\r\tslots: {}'
				},
				#name : #'StGenerateAssertEqualsCode class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #StGenerateAssertEqualsCode
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #NewTools-Debugger,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Model,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '198' ],
		#self : OmReference [ '199' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #StGenerateCode\r\tslots: { #lastSelectionInterval };\r\ttag: \'Model\';\r\tpackage: \'NewTools-Debugger\''
			},
			#name : #StGenerateCode,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #StGenerateCode
					},
					#name : #lastSelectionInterval,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << StGenerateCode class\r\tslots: {}'
				},
				#name : #'StGenerateCode class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #StGenerateCode
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #NewTools-Debugger,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Model,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '199' ],
		#self : OmReference [ '200' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MicParsingError\r\tslots: { #line };\r\ttag: \'Parser\';\r\tpackage: \'Microdown\''
			},
			#name : #MicParsingError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MicParsingError
					},
					#name : #line,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MicParsingError class\r\tslots: {}'
				},
				#name : #'MicParsingError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MicParsingError
				},
				#parent : @6,
				#content : 'I am Parsing error.\rI should be obsoleted.\r\r<!inputFile|pa=foo!> ',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Microdown,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Parser,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '200' ],
		#self : OmReference [ '201' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MicResourceReferenceError\r\tslots: {};\r\ttag: \'Core\';\r\tpackage: \'Microdown\''
			},
			#name : #MicResourceReferenceError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MicResourceReferenceError class\r\tslots: {}'
				},
				#name : #'MicResourceReferenceError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MicResourceReferenceError
				},
				#parent : @6,
				#content : 'Sometimes resources can not be accessed, their uri can be misspelled, the http server can be down, etc.\rI am signalled when one tries to access a resource which can not be accessed for any reason.\r\rIn particular, the methods `loadImage` and `loadMicrodown` in (subclasses of) `MicAbsoluteResourceReference` can signal me.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Microdown,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Core,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '201' ],
		#self : OmReference [ '202' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MicPropertyError\r\tslots: {};\r\ttag: \'Parser\';\r\tpackage: \'Microdown-Tests\''
			},
			#name : #MicPropertyError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MicPropertyError class\r\tslots: {}'
				},
				#name : #'MicPropertyError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MicPropertyError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Microdown-Tests,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Parser,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '202' ],
		#self : OmReference [ '203' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #BCFailingOnPurposeForTestError\r\tslots: {};\r\ttag: \'Tests\';\r\tpackage: \'BeautifulComments\''
			},
			#name : #BCFailingOnPurposeForTestError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << BCFailingOnPurposeForTestError class\r\tslots: {}'
				},
				#name : #'BCFailingOnPurposeForTestError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #BCFailingOnPurposeForTestError
				},
				#parent : @6,
				#content : 'I am a dedicated error used to check the the CaptureErrors setting is working as intended',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #BeautifulComments,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Tests,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '203' ],
		#self : OmReference [ '204' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #TFCallbackCannotReturn,
				#definitionSource : 'TFCallbackCannotReturn << #TFIncorrectOrderCallbackReturn\r\tslots: { #previousCallbacks };\r\ttag: \'Callbacks\';\r\tpackage: \'ThreadedFFI\''
			},
			#name : #TFIncorrectOrderCallbackReturn,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #TFIncorrectOrderCallbackReturn
					},
					#name : #previousCallbacks,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'TFCallbackCannotReturn class << TFIncorrectOrderCallbackReturn class\r\tslots: {}'
				},
				#name : #'TFIncorrectOrderCallbackReturn class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TFIncorrectOrderCallbackReturn
				},
				#parent : @6,
				#content : 'I am an error indicating a callback tries to return in an incorrect order.\rI notify the user with the problematic callback and the list of callbacks that should have returned before.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #ThreadedFFI,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Callbacks,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '204' ],
		#self : OmReference [ '205' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #TFCallbackCannotReturn,
				#definitionSource : 'TFCallbackCannotReturn << #TFInvalidSessionCallbackReturn\r\tslots: {};\r\ttag: \'Callbacks\';\r\tpackage: \'ThreadedFFI\''
			},
			#name : #TFInvalidSessionCallbackReturn,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'TFCallbackCannotReturn class << TFInvalidSessionCallbackReturn class\r\tslots: {}'
				},
				#name : #'TFInvalidSessionCallbackReturn class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TFInvalidSessionCallbackReturn
				},
				#parent : @6,
				#content : 'I am an error that indicates the callback cannot return because the session where it was created it does not exist anymore.\rThe image has been saved and continue in a new session. The callback cannot return.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #ThreadedFFI,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Callbacks,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '205' ],
		#self : OmReference [ '206' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #TFCallbackCannotReturn\r\tslots: { #callbackInvocation };\r\ttag: \'Callbacks\';\r\tpackage: \'ThreadedFFI\''
			},
			#name : #TFCallbackCannotReturn,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #TFCallbackCannotReturn
					},
					#name : #callbackInvocation,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << TFCallbackCannotReturn class\r\tslots: {}'
				},
				#name : #'TFCallbackCannotReturn class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #TFCallbackCannotReturn
				},
				#parent : @6,
				#content : 'I am an error produced when the callback cannot return correctly.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #ThreadedFFI,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Callbacks,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '206' ],
		#self : OmReference [ '207' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitAbstractError,
				#definitionSource : 'LGitAbstractError << #LGitCallError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitCallError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitAbstractError class << LGitCallError class\r\tslots: {}'
				},
				#name : #'LGitCallError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitCallError
				},
				#parent : @6,
				#content : 'A callout error for git',
				#stamp : 'TorstenBergmann 6/2/2021 20:41'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '207' ],
		#self : OmReference [ '208' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EAMBIGUOUS\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EAMBIGUOUS,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EAMBIGUOUS class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EAMBIGUOUS class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EAMBIGUOUS
				},
				#parent : @6,
				#content : 'Return handler for GIT_EAMBIGUOUS - More than one object matches',
				#stamp : 'TorstenBergmann 6/2/2021 20:27'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '208' ],
		#self : OmReference [ '209' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EAPPLIED\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EAPPLIED,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EAPPLIED class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EAPPLIED class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EAPPLIED
				},
				#parent : @6,
				#content : 'Return handler for GIT_EAPPLIED - Patch/merge has already been applied',
				#stamp : 'TorstenBergmann 6/2/2021 20:38'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '209' ],
		#self : OmReference [ '210' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EAUTH\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EAUTH,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EAUTH class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EAUTH class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EAUTH
				},
				#parent : @6,
				#content : 'Return handler for GIT_EAUTH - Authentication error',
				#stamp : 'TorstenBergmann 6/2/2021 20:27'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '210' ],
		#self : OmReference [ '211' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EBAREREPO\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EBAREREPO,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EBAREREPO class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EBAREREPO class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EBAREREPO
				},
				#parent : @6,
				#content : 'Return handler for GIT_EBAREREPO - Operation not allowed on bare repository',
				#stamp : 'TorstenBergmann 6/2/2021 20:28'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '211' ],
		#self : OmReference [ '212' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EBUFS\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EBUFS,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EBUFS class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EBUFS class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EBUFS
				},
				#parent : @6,
				#content : 'Return handler for GIT_EBUFS - Output buffer too short to hold data',
				#stamp : 'TorstenBergmann 6/2/2021 20:28'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '212' ],
		#self : OmReference [ '213' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_ECERTIFICATE\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_ECERTIFICATE,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_ECERTIFICATE class\r\tslots: {}'
				},
				#name : #'LGit_GIT_ECERTIFICATE class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_ECERTIFICATE
				},
				#parent : @6,
				#content : 'Return handler for GIT_ECERTIFICATE - Server certificate is invalid',
				#stamp : 'TorstenBergmann 6/2/2021 20:37'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '213' ],
		#self : OmReference [ '214' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_ECONFLICT\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_ECONFLICT,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_ECONFLICT class\r\tslots: {}'
				},
				#name : #'LGit_GIT_ECONFLICT class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_ECONFLICT
				},
				#parent : @6,
				#content : 'Return handler for GIT_ECONFLICT - Internal only',
				#stamp : 'TorstenBergmann 6/2/2021 20:29'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '214' ],
		#self : OmReference [ '215' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EEOF\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EEOF,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EEOF class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EEOF class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EEOF
				},
				#parent : @6,
				#content : 'Return handler for GIT_EEOF',
				#stamp : 'TorstenBergmann 6/2/2021 20:08'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '215' ],
		#self : OmReference [ '216' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EEXISTS\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EEXISTS,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EEXISTS class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EEXISTS class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EEXISTS
				},
				#parent : @6,
				#content : 'Return handler for GIT_EEXISTS - Object exists preventing operation',
				#stamp : 'TorstenBergmann 6/2/2021 20:36'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '216' ],
		#self : OmReference [ '217' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EINVALID\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EINVALID,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EINVALID class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EINVALID class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EINVALID
				},
				#parent : @6,
				#content : 'Return handler for GIT_EINVALID',
				#stamp : 'TorstenBergmann 6/2/2021 20:08'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '217' ],
		#self : OmReference [ '218' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EINVALIDSPEC\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EINVALIDSPEC,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EINVALIDSPEC class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EINVALIDSPEC class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EINVALIDSPEC
				},
				#parent : @6,
				#content : 'Return handler for GIT_EINVALIDSPEC - Name/ref spec was not in a valid format',
				#stamp : 'TorstenBergmann 6/2/2021 20:36'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '218' ],
		#self : OmReference [ '219' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_ELOCKED\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_ELOCKED,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_ELOCKED class\r\tslots: {}'
				},
				#name : #'LGit_GIT_ELOCKED class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_ELOCKED
				},
				#parent : @6,
				#content : 'Return handler for GIT_ELOCKED',
				#stamp : 'TorstenBergmann 6/2/2021 20:08'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '219' ],
		#self : OmReference [ '220' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EMODIFIED\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EMODIFIED,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EMODIFIED class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EMODIFIED class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EMODIFIED
				},
				#parent : @6,
				#content : 'Return handler for GIT_EMODIFIED',
				#stamp : 'TorstenBergmann 6/2/2021 20:09'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '220' ],
		#self : OmReference [ '221' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_ENONFASTFORWARD\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_ENONFASTFORWARD,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_ENONFASTFORWARD class\r\tslots: {}'
				},
				#name : #'LGit_GIT_ENONFASTFORWARD class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_ENONFASTFORWARD
				},
				#parent : @6,
				#content : 'Return handler for GIT_ENONFASTFORWARD - Reference was not fast-forwardable',
				#stamp : 'TorstenBergmann 6/2/2021 20:35'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '221' ],
		#self : OmReference [ '222' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_ENOTFOUND\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_ENOTFOUND,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_ENOTFOUND class\r\tslots: {}'
				},
				#name : #'LGit_GIT_ENOTFOUND class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_ENOTFOUND
				},
				#parent : @6,
				#content : 'Return handler for GIT_ENOTFOUND - Requested object could not be found',
				#stamp : 'TorstenBergmann 6/2/2021 20:35'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '222' ],
		#self : OmReference [ '223' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EORPHANEDHEAD\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EORPHANEDHEAD,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EORPHANEDHEAD class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EORPHANEDHEAD class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EORPHANEDHEAD
				},
				#parent : @6,
				#content : 'Return handler for GIT_EORPHANEDHEAD',
				#stamp : 'TorstenBergmann 6/2/2021 20:11'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '223' ],
		#self : OmReference [ '224' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EPEEL\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EPEEL,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EPEEL class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EPEEL class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EPEEL
				},
				#parent : @6,
				#content : 'Return handler for GIT_EPEEL - The requested peel operation is not possible',
				#stamp : 'TorstenBergmann 6/2/2021 20:32'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '224' ],
		#self : OmReference [ '225' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_ERROR\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_ERROR,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_ERROR class\r\tslots: {}'
				},
				#name : #'LGit_GIT_ERROR class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_ERROR
				},
				#parent : @6,
				#content : 'Return handler for GIT_ERROR - Generic error',
				#stamp : 'TorstenBergmann 6/2/2021 20:31'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '225' ],
		#self : OmReference [ '226' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EUNBORNBRANCH\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EUNBORNBRANCH,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EUNBORNBRANCH class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EUNBORNBRANCH class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EUNBORNBRANCH
				},
				#parent : @6,
				#content : 'Return handler for GIT_EUNBORNBRANCH - HEAD refers to branch with no commits',
				#stamp : 'TorstenBergmann 6/2/2021 20:33'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '226' ],
		#self : OmReference [ '227' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EUNCOMMITTED\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EUNCOMMITTED,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EUNCOMMITTED class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EUNCOMMITTED class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EUNCOMMITTED
				},
				#parent : @6,
				#content : 'Return handler for GIT_EUNCOMMITTED - Uncommitted changes in index prevented operation',
				#stamp : 'TorstenBergmann 6/2/2021 20:33'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '227' ],
		#self : OmReference [ '228' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EUNMERGED\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EUNMERGED,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EUNMERGED class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EUNMERGED class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EUNMERGED
				},
				#parent : @6,
				#content : 'Return handler for GIT_EUNMERGED - Merge in progress prevented operation',
				#stamp : 'TorstenBergmann 6/2/2021 20:30'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '228' ],
		#self : OmReference [ '229' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_EUSER\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_EUSER,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_EUSER class\r\tslots: {}'
				},
				#name : #'LGit_GIT_EUSER class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_EUSER
				},
				#parent : @6,
				#content : 'Return handler for GIT_USER',
				#stamp : 'TorstenBergmann 6/2/2021 20:12'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '229' ],
		#self : OmReference [ '230' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_ITEROVER\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_ITEROVER,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_ITEROVER class\r\tslots: {}'
				},
				#name : #'LGit_GIT_ITEROVER class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_ITEROVER
				},
				#parent : @6,
				#content : 'Return handler for GIT_ITEROVER - Signals end of iteration with iterator',
				#stamp : 'TorstenBergmann 6/2/2021 20:30'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '230' ],
		#self : OmReference [ '231' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_OK\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_OK,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_OK class\r\tslots: {}'
				},
				#name : #'LGit_GIT_OK class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_OK
				},
				#parent : @6,
				#content : 'Return handler for GIT_OK - No error',
				#stamp : 'TorstenBergmann 6/2/2021 20:29'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '231' ],
		#self : OmReference [ '232' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitCallReturnHandler,
				#definitionSource : 'LGitCallReturnHandler << #LGit_GIT_PASSTHROUGH\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGit_GIT_PASSTHROUGH,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitCallReturnHandler class << LGit_GIT_PASSTHROUGH class\r\tslots: {}'
				},
				#name : #'LGit_GIT_PASSTHROUGH class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGit_GIT_PASSTHROUGH
				},
				#parent : @6,
				#content : 'Return handler for GIT_PASSTHROUGH - A user-configured callback refused to act',
				#stamp : 'TorstenBergmann 6/2/2021 20:34'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '232' ],
		#self : OmReference [ '233' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitAbstractError,
				#definitionSource : 'LGitAbstractError << #LGitCallReturnHandler\r\tslots: {};\r\ttag: \'Exceptions-ReturnCodes\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitCallReturnHandler,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitAbstractError class << LGitCallReturnHandler class\r\tslots: {}'
				},
				#name : #'LGitCallReturnHandler class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitCallReturnHandler
				},
				#parent : @6,
				#content : 'Callback handler for LibGit error codes',
				#stamp : 'TorstenBergmann 6/2/2021 20:13'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions-ReturnCodes,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '233' ],
		#self : OmReference [ '234' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitAbstractError,
				#definitionSource : 'LGitAbstractError << #LGitIllegalArgument\r\tslots: { #expectedClass };\r\ttag: \'Exceptions\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitIllegalArgument,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #LGitIllegalArgument
					},
					#name : #expectedClass,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitAbstractError class << LGitIllegalArgument class\r\tslots: {}'
				},
				#name : #'LGitIllegalArgument class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitIllegalArgument
				},
				#parent : @6,
				#content : 'An illegal argument have been given',
				#stamp : 'TorstenBergmann 6/2/2021 21:12'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '234' ],
		#self : OmReference [ '235' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitAbstractError,
				#definitionSource : 'LGitAbstractError << #LGitNoReturnCodeHandlerDefined\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitNoReturnCodeHandlerDefined,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitAbstractError class << LGitNoReturnCodeHandlerDefined class\r\tslots: {}'
				},
				#name : #'LGitNoReturnCodeHandlerDefined class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitNoReturnCodeHandlerDefined
				},
				#parent : @6,
				#content : 'A return code handler is missing',
				#stamp : 'TorstenBergmann 6/2/2021 21:13'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '235' ],
		#self : OmReference [ '236' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitAbstractError,
				#definitionSource : 'LGitAbstractError << #LGitObjectNotFound\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitObjectNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitAbstractError class << LGitObjectNotFound class\r\tslots: {}'
				},
				#name : #'LGitObjectNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitObjectNotFound
				},
				#parent : @6,
				#content : 'An object in git was not found',
				#stamp : 'TorstenBergmann 6/2/2021 21:13'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '236' ],
		#self : OmReference [ '237' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitAbstractError,
				#definitionSource : 'LGitAbstractError << #LGitObjectNotInitialized\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitObjectNotInitialized,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitAbstractError class << LGitObjectNotInitialized class\r\tslots: {}'
				},
				#name : #'LGitObjectNotInitialized class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitObjectNotInitialized
				},
				#parent : @6,
				#content : 'An object in git was not initialized\r',
				#stamp : 'TorstenBergmann 6/2/2021 21:13'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '237' ],
		#self : OmReference [ '238' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitAbstractError,
				#definitionSource : 'LGitAbstractError << #LGitOpeningRepositoryError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitOpeningRepositoryError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitAbstractError class << LGitOpeningRepositoryError class\r\tslots: {}'
				},
				#name : #'LGitOpeningRepositoryError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitOpeningRepositoryError
				},
				#parent : @6,
				#content : 'There was an error opening a git repository',
				#stamp : 'TorstenBergmann 6/2/2021 21:14'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '238' ],
		#self : OmReference [ '239' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitAbstractError,
				#definitionSource : 'LGitAbstractError << #LGitRepositoryNotFound\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitRepositoryNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitAbstractError class << LGitRepositoryNotFound class\r\tslots: {}'
				},
				#name : #'LGitRepositoryNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitRepositoryNotFound
				},
				#parent : @6,
				#content : 'A git repository was not found',
				#stamp : 'TorstenBergmann 6/2/2021 21:14'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '239' ],
		#self : OmReference [ '240' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #LGitAbstractError,
				#definitionSource : 'LGitAbstractError << #LGitWritingTreeFailed\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitWritingTreeFailed,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'LGitAbstractError class << LGitWritingTreeFailed class\r\tslots: {}'
				},
				#name : #'LGitWritingTreeFailed class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitWritingTreeFailed
				},
				#parent : @6,
				#content : 'Writing of a git tree failed',
				#stamp : 'TorstenBergmann 6/2/2021 21:14'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '240' ],
		#self : OmReference [ '241' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #LGitAbstractError\r\tslots: { #object };\r\ttag: \'Exceptions\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitAbstractError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #LGitAbstractError
					},
					#name : #object,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << LGitAbstractError class\r\tslots: {}'
				},
				#name : #'LGitAbstractError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitAbstractError
				},
				#parent : @6,
				#content : 'Abstract superclass for git errors',
				#stamp : 'TorstenBergmann 6/2/2021 20:40'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '241' ],
		#self : OmReference [ '242' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #LGitNoCredentialsProvided\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'LibGit-Core\''
			},
			#name : #LGitNoCredentialsProvided,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << LGitNoCredentialsProvided class\r\tslots: {}'
				},
				#name : #'LGitNoCredentialsProvided class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #LGitNoCredentialsProvided
				},
				#parent : @6,
				#content : 'I\'m an error thrown in callbacks when no credentials has been found.\rCallbacks supplying credentials HAVE to throw this error and not one created by themselves (because libgit2 aborts processing with this exception and not with others). ',
				#stamp : 'EstebanLorenzano 2/8/2017 16:19'
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #LibGit-Core,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '242' ],
		#self : OmReference [ '243' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #CannotIdentifyVersionForCommit\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #CannotIdentifyVersionForCommit,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << CannotIdentifyVersionForCommit class\r\tslots: {}'
				},
				#name : #'CannotIdentifyVersionForCommit class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #CannotIdentifyVersionForCommit
				},
				#parent : @6,
				#content : 'This error is signaled when looking for a version in a commit (and its ancestry) has found two versions and can not decide which of them is the desired one. \r\rThis should not happen if the repository is consistent.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '243' ],
		#self : OmReference [ '244' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceAuthenticationError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceAuthenticationError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceAuthenticationError class\r\tslots: {}'
				},
				#name : #'IceAuthenticationError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceAuthenticationError
				},
				#parent : @6,
				#content : 'I indicate when an error trying to authenticate occurs (tipically, when cloning without credentials)',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '244' ],
		#self : OmReference [ '245' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceBranchAlreadyExists\r\tslots: { #branchName };\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceBranchAlreadyExists,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceBranchAlreadyExists
					},
					#name : #branchName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceBranchAlreadyExists class\r\tslots: {}'
				},
				#name : #'IceBranchAlreadyExists class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceBranchAlreadyExists
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '245' ],
		#self : OmReference [ '246' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceCheckoutConflictError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceCheckoutConflictError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceCheckoutConflictError class\r\tslots: {}'
				},
				#name : #'IceCheckoutConflictError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceCheckoutConflictError
				},
				#parent : @6,
				#content : 'I indicate there are conflicts when I try to checkout so I can\'t perform the operation.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '246' ],
		#self : OmReference [ '247' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceDuplicatedRepository\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceDuplicatedRepository,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceDuplicatedRepository class\r\tslots: {}'
				},
				#name : #'IceDuplicatedRepository class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceDuplicatedRepository
				},
				#parent : @6,
				#content : 'When trying to create a repository I found another one with a conflicting location (i.e. the same director on disk).',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '247' ],
		#self : OmReference [ '248' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceGenericError\r\tslots: { #wrappedException };\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceGenericError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceGenericError
					},
					#name : #wrappedException,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceGenericError class\r\tslots: {}'
				},
				#name : #'IceGenericError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceGenericError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '248' ],
		#self : OmReference [ '249' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceGitUsernameOrEmailNotFound\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceGitUsernameOrEmailNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceGitUsernameOrEmailNotFound class\r\tslots: {}'
				},
				#name : #'IceGitUsernameOrEmailNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceGitUsernameOrEmailNotFound
				},
				#parent : @6,
				#content : 'I\'m an error to be sent when the error that comes from external library can be guessed to be the absense of user.name and user.email properties.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '249' ],
		#self : OmReference [ '250' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceLocalRepositoryMissing\r\tslots: { #repository };\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceLocalRepositoryMissing,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceLocalRepositoryMissing
					},
					#name : #repository,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceLocalRepositoryMissing class\r\tslots: {}'
				},
				#name : #'IceLocalRepositoryMissing class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceLocalRepositoryMissing
				},
				#parent : @6,
				#content : 'The repository code directory does not exist, maybe because the image was moved. \r\rDefault action is to clone the repository again, but signal an error and allow for other components to react accordingly.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '250' ],
		#self : OmReference [ '251' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceMergeAborted\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceMergeAborted,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceMergeAborted class\r\tslots: {}'
				},
				#name : #'IceMergeAborted class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceMergeAborted
				},
				#parent : @6,
				#content : 'Attempting to merge arised a conflict so merge was aborted.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '251' ],
		#self : OmReference [ '252' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceMissingRepositoryEntry\r\tslots: { #name . #owner };\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceMissingRepositoryEntry,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceMissingRepositoryEntry
					},
					#name : #name,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceMissingRepositoryEntry
					},
					#name : #owner,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceMissingRepositoryEntry class\r\tslots: {}'
				},
				#name : #'IceMissingRepositoryEntry class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceMissingRepositoryEntry
				},
				#parent : @6,
				#content : 'Directory does not exist in the specified version in the repository.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '252' ],
		#self : OmReference [ '253' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceNoRemote\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceNoRemote,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceNoRemote class\r\tslots: {}'
				},
				#name : #'IceNoRemote class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceNoRemote
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '253' ],
		#self : OmReference [ '254' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceNoRemoteBranch\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceNoRemoteBranch,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceNoRemoteBranch class\r\tslots: {}'
				},
				#name : #'IceNoRemoteBranch class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceNoRemoteBranch
				},
				#parent : @6,
				#content : 'The operation you tried (for example push) requires that your branch has a configured upstream (something like origin/branchName), but is has none.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '254' ],
		#self : OmReference [ '255' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceNotInBranch\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceNotInBranch,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceNotInBranch class\r\tslots: {}'
				},
				#name : #'IceNotInBranch class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceNotInBranch
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '255' ],
		#self : OmReference [ '256' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceNothingToCommit\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceNothingToCommit,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceNothingToCommit class\r\tslots: {}'
				},
				#name : #'IceNothingToCommit class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceNothingToCommit
				},
				#parent : @6,
				#content : 'I indicate when there is nothing to commit (and you tried to do it)',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '256' ],
		#self : OmReference [ '257' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceRemoteAlreadyExistsError\r\tslots: { #remoteName };\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceRemoteAlreadyExistsError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceRemoteAlreadyExistsError
					},
					#name : #remoteName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceRemoteAlreadyExistsError class\r\tslots: {}'
				},
				#name : #'IceRemoteAlreadyExistsError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceRemoteAlreadyExistsError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '257' ],
		#self : OmReference [ '258' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceRemoteDesynchronized\r\tslots: { #remote . #resumable };\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceRemoteDesynchronized,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceRemoteDesynchronized
					},
					#name : #remote,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceRemoteDesynchronized
					},
					#name : #resumable,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceRemoteDesynchronized class\r\tslots: {}'
				},
				#name : #'IceRemoteDesynchronized class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceRemoteDesynchronized
				},
				#parent : @6,
				#content : 'I indicate when a remote is desyncronized. \rIt means the version I have in the working copy (not the image) is different to the version I have in the remote (then I need to pull/branch/whatever before committing).',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '258' ],
		#self : OmReference [ '259' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceRemoteNotFoundError\r\tslots: { #remoteName };\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceRemoteNotFoundError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceRemoteNotFoundError
					},
					#name : #remoteName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceRemoteNotFoundError class\r\tslots: {}'
				},
				#name : #'IceRemoteNotFoundError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceRemoteNotFoundError
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '259' ],
		#self : OmReference [ '260' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceShouldCommitBeforePull\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceShouldCommitBeforePull,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceShouldCommitBeforePull class\r\tslots: {}'
				},
				#name : #'IceShouldCommitBeforePull class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceShouldCommitBeforePull
				},
				#parent : @6,
				#content : 'I\'m thrown when an attempt to pull was made and there are changes in the image. \rThis is a resumable error because user may want to do it anyway.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '260' ],
		#self : OmReference [ '261' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceTagAlreadyExists\r\tslots: { #tagName };\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceTagAlreadyExists,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceTagAlreadyExists
					},
					#name : #tagName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceTagAlreadyExists class\r\tslots: {}'
				},
				#name : #'IceTagAlreadyExists class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceTagAlreadyExists
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '261' ],
		#self : OmReference [ '262' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceTagNotFound\r\tslots: { #tagName };\r\ttag: \'Core\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceTagNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceTagNotFound
					},
					#name : #tagName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceTagNotFound class\r\tslots: {}'
				},
				#name : #'IceTagNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceTagNotFound
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Core,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '262' ],
		#self : OmReference [ '263' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceUpstreamNotConfigured\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceUpstreamNotConfigured,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceUpstreamNotConfigured class\r\tslots: {}'
				},
				#name : #'IceUpstreamNotConfigured class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceUpstreamNotConfigured
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '263' ],
		#self : OmReference [ '264' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceVersionDoesNotExist\r\tslots: { #version };\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceVersionDoesNotExist,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceVersionDoesNotExist
					},
					#name : #version,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceVersionDoesNotExist class\r\tslots: {}'
				},
				#name : #'IceVersionDoesNotExist class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceVersionDoesNotExist
				},
				#parent : @6,
				#content : 'Version does not exist, probably the package was created in a later commit or it was deleted.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '264' ],
		#self : OmReference [ '265' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceWorkingCopyDesyncronized\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceWorkingCopyDesyncronized,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceWorkingCopyDesyncronized class\r\tslots: {}'
				},
				#name : #'IceWorkingCopyDesyncronized class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceWorkingCopyDesyncronized
				},
				#parent : @6,
				#content : 'I indicate when a working copy is desyncronized. \rIt means the version I have in the image is different to the version I have in the working copy.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '265' ],
		#self : OmReference [ '266' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceWrongUrl\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceWrongUrl,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceWrongUrl class\r\tslots: {}'
				},
				#name : #'IceWrongUrl class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceWrongUrl
				},
				#parent : @6,
				#content : 'We can not parse the origin URL you have introduced. Maybe you made a typo, or maybe we do not support that kind of URLs.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '266' ],
		#self : OmReference [ '267' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceBranchNotFound\r\tslots: { #branchName };\r\ttag: \'Exceptions\';\r\tpackage: \'Iceberg-Libgit\''
			},
			#name : #IceBranchNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceBranchNotFound
					},
					#name : #branchName,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceBranchNotFound class\r\tslots: {}'
				},
				#name : #'IceBranchNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceBranchNotFound
				},
				#parent : @6,
				#content : 'A branch was not found.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg-Libgit,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '267' ],
		#self : OmReference [ '268' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceCloneError,
				#definitionSource : 'IceCloneError << #IceCloneLocationAlreadyExists\r\tslots: { #location };\r\ttag: \'Exceptions\';\r\tpackage: \'Iceberg-Libgit\''
			},
			#name : #IceCloneLocationAlreadyExists,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceCloneLocationAlreadyExists
					},
					#name : #location,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceCloneError class << IceCloneLocationAlreadyExists class\r\tslots: {}'
				},
				#name : #'IceCloneLocationAlreadyExists class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceCloneLocationAlreadyExists
				},
				#parent : @6,
				#content : 'Error while cloning a project - the location on disk already exists\r',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg-Libgit,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '268' ],
		#self : OmReference [ '269' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceCloneError,
				#definitionSource : 'IceCloneError << #IceCloneRemoteNotFound\r\tslots: { #remoteUrl };\r\ttag: \'Exceptions\';\r\tpackage: \'Iceberg-Libgit\''
			},
			#name : #IceCloneRemoteNotFound,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceCloneRemoteNotFound
					},
					#name : #remoteUrl,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceCloneError class << IceCloneRemoteNotFound class\r\tslots: {}'
				},
				#name : #'IceCloneRemoteNotFound class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceCloneRemoteNotFound
				},
				#parent : @6,
				#content : 'The remote was not found',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg-Libgit,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '269' ],
		#self : OmReference [ '270' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceError,
				#definitionSource : 'IceError << #IceCloneError\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Iceberg-Libgit\''
			},
			#name : #IceCloneError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceError class << IceCloneError class\r\tslots: {}'
				},
				#name : #'IceCloneError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceCloneError
				},
				#parent : @6,
				#content : 'Error while cloning a project',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg-Libgit,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '270' ],
		#self : OmReference [ '271' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #IceError\r\tslots: {};\r\ttag: \'Errors\';\r\tpackage: \'Iceberg\''
			},
			#name : #IceError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << IceError class\r\tslots: {}'
				},
				#name : #'IceError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceError
				},
				#parent : @6,
				#content : 'Base class for all errors in Iceberg.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Errors,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '271' ],
		#self : OmReference [ '272' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceGitHubError,
				#definitionSource : 'IceGitHubError << #IceGitHubBadCredentialsError\r\tslots: {};\r\ttag: \'Model\';\r\tpackage: \'Iceberg-Plugin-GitHub\''
			},
			#name : #IceGitHubBadCredentialsError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceGitHubError class << IceGitHubBadCredentialsError class\r\tslots: {}'
				},
				#name : #'IceGitHubBadCredentialsError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceGitHubBadCredentialsError
				},
				#parent : @6,
				#content : 'I\'m an error that happens when credentials are bad.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg-Plugin-GitHub,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Model,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '272' ],
		#self : OmReference [ '273' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #IceGitHubError,
				#definitionSource : 'IceGitHubError << #IceGitHubGenericError\r\tslots: {};\r\ttag: \'Model\';\r\tpackage: \'Iceberg-Plugin-GitHub\''
			},
			#name : #IceGitHubGenericError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'IceGitHubError class << IceGitHubGenericError class\r\tslots: {}'
				},
				#name : #'IceGitHubGenericError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceGitHubGenericError
				},
				#parent : @6,
				#content : 'I\'m an error that happens when something went wrong on GitHub API operations.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg-Plugin-GitHub,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Model,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '273' ],
		#self : OmReference [ '274' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #IceGitHubError\r\tslots: { #response . #jsonContents };\r\ttag: \'Model\';\r\tpackage: \'Iceberg-Plugin-GitHub\''
			},
			#name : #IceGitHubError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceGitHubError
					},
					#name : #response,
					#parent : @6
				},
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #IceGitHubError
					},
					#name : #jsonContents,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << IceGitHubError class\r\tslots: {}'
				},
				#name : #'IceGitHubError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #IceGitHubError
				},
				#parent : @6,
				#content : 'I\'m an error that happens when something fails when performing a GitHub action.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Iceberg-Plugin-GitHub,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Model,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '274' ],
		#self : OmReference [ '275' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #MicGitHubAPIRateError\r\tslots: { #response };\r\tpackage: \'NewTools-DocumentBrowser-GitHubResource\''
			},
			#name : #MicGitHubAPIRateError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #MicGitHubAPIRateError
					},
					#name : #response,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << MicGitHubAPIRateError class\r\tslots: {}'
				},
				#name : #'MicGitHubAPIRateError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #MicGitHubAPIRateError
				},
				#parent : @6,
				#content : 'I am an error raised when there is not enough api calls left to complete the call.\rGithub restricts the number of api calls to 60 per hour',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #NewTools-DocumentBrowser-GitHubResource,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '275' ],
		#self : OmReference [ '276' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Error,
				#definitionSource : 'Error << #GoferRepositoryError\r\tslots: { #repository };\r\tpackage: \'Gofer-Deprecated\''
			},
			#name : #GoferRepositoryError,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [
				RGInstanceVariableDefinition {
					#annotations : IdentityDictionary {
						#isMeta : false,
						#className : #GoferRepositoryError
					},
					#name : #repository,
					#parent : @6
				}
			],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Error class << GoferRepositoryError class\r\tslots: {}'
				},
				#name : #'GoferRepositoryError class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #GoferRepositoryError
				},
				#parent : @6,
				#content : 'A GoferRepositoryError is the error thrown when a repository cannot be accessed.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Gofer-Deprecated,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '276' ],
		#self : OmReference [ '277' ]
	},
	#content : EpClassAddition {
		#class : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #TriBoolean,
				#definitionSource : 'TriBoolean << #Error\r\tslots: {};\r\tpackage: \'TriValuedLogic\''
			},
			#name : #Error,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'TriBoolean class << Error class\r\tslots: {}'
				},
				#name : #'Error class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #Error
				},
				#parent : @6,
				#content : '>From the ANSI standard:\rThis protocol describes the behavior of instances of class Error. These are used to represent error conditions that prevent the normal continuation of processing. Actual error exceptions used by an application may be subclasses of this class.\rAs Error is explicitly specified  to be subclassable, conforming implementations must implement its behavior in a non-fragile manner.\r\rAdditional notes:\rError>defaultAction uses an explicit test for the presence of the Debugger class to decide whether or not it is in development mode.  In the future, TFEI hopes to enhance the semantics of #defaultAction to improve support for pluggable default handlers.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #TriValuedLogic,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}OmEntry {
	#tags : {
		#prior : OmReference [ '277' ],
		#self : OmReference [ '278' ]
	},
	#content : EpClassModification {
		#oldClass : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #Exception,
				#definitionSource : 'Exception << #Error\r\tslots: {};\r\ttag: \'Exceptions\';\r\tpackage: \'Kernel\''
			},
			#name : #Error,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'Exception class << Error class\r\tslots: {}'
				},
				#name : #'Error class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @6
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #Error
				},
				#parent : @6,
				#content : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #Kernel,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Exceptions,
			#sharedPools : OrderedCollection [ ]
		},
		#newClass : RGClassDefinition {
			#annotations : IdentityDictionary {
				#traitCompositionSource : '{}',
				#superclassName : #TriBoolean,
				#definitionSource : 'TriBoolean << #Error\r\tslots: {};\r\tpackage: \'TriValuedLogic\''
			},
			#name : #Error,
			#methods : IdentityDictionary { },
			#protocols : Set [ ],
			#instanceVariables : OrderedCollection [ ],
			#metaClass : RGMetaclassDefinition {
				#annotations : IdentityDictionary {
					#traitCompositionSource : '{}',
					#definitionSource : 'TriBoolean class << Error class\r\tslots: {}'
				},
				#name : #'Error class',
				#methods : IdentityDictionary { },
				#protocols : Set [ ],
				#instanceVariables : OrderedCollection [ ],
				#baseClass : @24
			},
			#comment : RGCommentDefinition {
				#annotations : IdentityDictionary {
					#isMeta : false,
					#className : #Error
				},
				#parent : @24,
				#content : '>From the ANSI standard:\rThis protocol describes the behavior of instances of class Error. These are used to represent error conditions that prevent the normal continuation of processing. Actual error exceptions used by an application may be subclasses of this class.\rAs Error is explicitly specified  to be subclassable, conforming implementations must implement its behavior in a non-fragile manner.\r\rAdditional notes:\rError>defaultAction uses an explicit test for the presence of the Debugger class to decide whether or not it is in development mode.  In the future, TFEI hopes to enhance the semantics of #defaultAction to improve support for pluggable default handlers.',
				#stamp : ''
			},
			#classVariables : OrderedCollection [ ],
			#package : RGPackageDefinition {
				#name : #TriValuedLogic,
				#definedClasses : IdentityDictionary { },
				#definedMethods : IdentityDictionary { },
				#extensionMethods : IdentityDictionary { }
			},
			#packageTag : #Uncategorized,
			#sharedPools : OrderedCollection [ ]
		}
	}
}