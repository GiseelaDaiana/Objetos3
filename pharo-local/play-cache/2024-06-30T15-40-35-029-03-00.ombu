OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T15:41:18.731-03:00' ],
		#self : OmReference [ '1' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := Error new.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T15:41:49.155-03:00' ],
		#self : OmReference [ '2' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := Error new.\r\rv & v. "Debería devolver Verdadero"\rv & f. "Debería devolver Falso"\rv & e. "Debería devolver Error"\rf & v. "Debería devolver Falso"\rf & f. "Debería devolver Falso"\rf & e. "Debería devolver Falso"\re & v. "Debería devolver Error"\re & f. "Debería devolver Error"\re & e. "Debería devolver Error"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T15:42:26.005-03:00' ],
		#self : OmReference [ '3' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\rv & v. "Debería devolver Verdadero"\rv & f. "Debería devolver Falso"\rv & e. "Debería devolver Error"\rf & v. "Debería devolver Falso"\rf & f. "Debería devolver Falso"\rf & e. "Debería devolver Falso"\re & v. "Debería devolver Error"\re & f. "Debería devolver Error"\re & e. "Debería devolver Error"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T15:42:53.876-03:00' ],
		#self : OmReference [ '4' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\rv & v.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T15:43:43.224-03:00' ],
		#self : OmReference [ '5' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\rv & v. "Debería devolver Verdadero"\rv & f. "Debería devolver Falso"\rv & e. "Debería devolver Error"\rf & v. "Debería devolver Falso"\rf & f. "Debería devolver Falso"\rf & e. "Debería devolver Falso"\re & v. "Debería devolver Error"\re & f. "Debería devolver Error"\re & e. "Debería devolver Error"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:10:48.561-03:00' ],
		#self : OmReference [ '6' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\rv & f. "Debería devolver Falso"'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:11:56.256-03:00' ],
		#self : OmReference [ '7' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\re & v. "Debería devolver Error"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:27:36.637-03:00' ],
		#self : OmReference [ '8' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:27:48.5-03:00' ],
		#self : OmReference [ '9' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = v.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: v not = f.\r    self assert: f not = v.\r    self assert: e not = e.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:29:23.622-03:00' ],
		#self : OmReference [ '10' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = v.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: v not = f.\r    self assert: f not = v.\r    self assert: e not = e.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:29:52.309-03:00' ],
		#self : OmReference [ '11' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: v not = f.\r    self assert: f not = v.\r    self assert: e not = e.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:32:52.837-03:00' ],
		#self : OmReference [ '12' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: v not equal f.\r    self assert: f not equal v.\r    self assert: e not equal e.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:33:40.872-03:00' ],
		#self : OmReference [ '13' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: (v not) equal f.\r    self assert: f not equal v.\r    self assert: e not equal e.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:33:56.506-03:00' ],
		#self : OmReference [ '14' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: v not == f.\r    self assert: f not = v.\r    self assert: e not = e.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:34:05.139-03:00' ],
		#self : OmReference [ '15' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: (v not) == f.\r    self assert: f not = v.\r    self assert: e not = e.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:34:13.709-03:00' ],
		#self : OmReference [ '16' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: (v not) = f.\r    self assert: f not = v.\r    self assert: e not = e.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:35:41.84-03:00' ],
		#self : OmReference [ '17' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: (v not) class = f class.\r    self assert: f not class = v class.\r    self assert: e not class = e class.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:36:04.551-03:00' ],
		#self : OmReference [ '18' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: (v not) class = f class.\r    self assert: f not class = v class.\r    self assert: e not class = e.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:36:13.153-03:00' ],
		#self : OmReference [ '19' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: (v not) class = f class.\r    self assert: f not class = v class.\r    self assert: e not class = e class.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:36:51.136-03:00' ],
		#self : OmReference [ '20' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:55:57.553-03:00' ],
		#self : OmReference [ '21' ]
	},
	#content : '| v f e verdadero falso error|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r        verdadero := Verdadero new.\r        falso := Falso new.\r        error := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: [f]) equals: v.\r    self assert: (v or: [e]) equals: v.\r    self assert: (f or: [v ]) equals: v.\r    self assert: (f or: [e]) equals: e.\r    self assert: (e or: [v]) equals: e.\r    self assert: (e or: [f]) equals: e.\r\r        verdadero := Verdadero new.\r        falso := Falso new.\r        error := Error new.\r\r        self assert: (verdadero and: [falso]) equals: falso.\r        self assert: (verdadero and: [error]) equals: error.\r        self assert: (falso and: [verdadero]) equals: falso.\r        self assert: (falso and: [error]) equals: falso.\r        self assert: (error and: [verdadero]) equals: error.\r        self assert: (error and: [falso]) equals: error.\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:56:09.402-03:00' ],
		#self : OmReference [ '22' ]
	},
	#content : '| v f e verdadero falso error|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r        verdadero := Verdadero new.\r        falso := Falso new.\r        error := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: [f]) equals: v.\r    self assert: (v or: [e]) equals: v.\r    self assert: (f or: [v ]) equals: v.\r    self assert: (f or: [e]) equals: e.\r    self assert: (e or: [v]) equals: e.\r    self assert: (e or: [f]) equals: e.\r\r        verdadero := Verdadero new.\r        falso := Falso new.\r        error := Error new.\r\r        self assert: (verdadero and: [falso]) equals: falso.\r        self assert: (verdadero and: [error]) equals: error.\r        self assert: (falso and: [verdadero]) equals: falso.\r        self assert: (falso and: [error]) equals: falso.\r        self assert: (error and: [verdadero]) equals: error.\r        self assert: (error and: [falso]) equals: error.\r\r        self assert: verdadero esVerdadero.\r        self deny: falso esVerdadero.\r        self deny: error esVerdadero.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:56:30.127-03:00' ],
		#self : OmReference [ '23' ]
	},
	#content : '| v f e verdadero falso error|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r        verdadero := Verdadero new.\r        falso := Falso new.\r        error := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: [f]) equals: v.\r    self assert: (v or: [e]) equals: v.\r    self assert: (f or: [v ]) equals: v.\r    self assert: (f or: [e]) equals: e.\r    self assert: (e or: [v]) equals: e.\r    self assert: (e or: [f]) equals: e.\r\r        verdadero := Verdadero new.\r        falso := Falso new.\r        error := Error new.\r\r        self assert: (verdadero and: [falso]) equals: falso.\r        self assert: (verdadero and: [error]) equals: error.\r        self assert: (falso and: [verdadero]) equals: falso.\r        self assert: (falso and: [error]) equals: falso.\r        self assert: (error and: [verdadero]) equals: error.\r        self assert: (error and: [falso]) equals: error.\r\r        self assert: verdadero esVerdadero.\r        self deny: falso esVerdadero.\r        self deny: error esVerdadero.\r\r        self deny: verdadero esFalso.\r        self assert: falso esFalso.\r        self deny: error esFalso.\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:57:34.985-03:00' ],
		#self : OmReference [ '24' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: [f]) equals: v.\r    self assert: (v or: [e]) equals: v.\r    self assert: (f or: [v ]) equals: v.\r    self assert: (f or: [e]) equals: e.\r    self assert: (e or: [v]) equals: e.\r    self assert: (e or: [f]) equals: e.\r\r        v := Verdadero new.\r        f := Falso new.\r        e := Error new.\r\r       \r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:58:01.752-03:00' ],
		#self : OmReference [ '25' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: [f]) equals: v.\r    self assert: (v or: [e]) equals: v.\r    self assert: (f or: [v ]) equals: v.\r    self assert: (f or: [e]) equals: e.\r    self assert: (e or: [v]) equals: e.\r    self assert: (e or: [f]) equals: e.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:58:17.419-03:00' ],
		#self : OmReference [ '26' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: [f]) equals: v.\r    self assert: (v or: [e]) equals: v.\r    self assert: (f or: [v]) equals: v.\r    self assert: (f or: [e]) equals: e.\r    self assert: (e or: [v]) equals: e.\r    self assert: (e or: [f]) equals: e.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:58:38.7-03:00' ],
		#self : OmReference [ '27' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: [f]) equals: v.\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:58:48.842-03:00' ],
		#self : OmReference [ '28' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:59:07.475-03:00' ],
		#self : OmReference [ '29' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: [f]) equals: v.\r    self assert: (v or: [e]) equals: v.\r    self assert: (f or: [v]) equals: v.\r    self assert: (f or: [e]) equals: e.\r    self assert: (e or: [v]) equals: e.\r    self assert: (e or: [f]) equals: e.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T16:59:11.736-03:00' ],
		#self : OmReference [ '30' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: [f]) equals: v.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:01:19.565-03:00' ],
		#self : OmReference [ '31' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: f) equals: v.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:01:51.674-03:00' ],
		#self : OmReference [ '32' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: f) esVerdadero.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:03:22.955-03:00' ],
		#self : OmReference [ '33' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r            \r    self assert: (v or: [f]) esVerdadero.\r    self assert: (v or: [e]) esVerdadero.\r    self assert: (f or: [v]) esVerdadero.\r    self assert: (f or: [e]) esError.\r    self assert: (e or: [v]) esError.\r    self assert: (e or: [f]) esError.\r    self assert: (verdadero and: [falso]) esFalso.\r    self assert: (verdadero and: [error]) esError.\r    self assert: (falso and: [verdadero]) esFalso.\r    self assert: (falso and: [error]) esFalso.\r    self assert: (error and: [verdadero]) esError .\r    self assert: (error and: [falso]) esError.\r\r    self assert: verdadero esVerdadero.\r    self deny: falso esVerdadero.\r    self deny: error esVerdadero.\r\r    self deny: verdadero esFalso.\r    self assert: falso esFalso.\r    self deny: error esFalso.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:04:24.604-03:00' ],
		#self : OmReference [ '34' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r            \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esVerdadero.\r    self assert: (f or: v) esVerdadero.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r    self assert: (v and: [f]) esFalso.\r    self assert: (v and: [e]) esError.\r    self assert: (f and: [v]) esFalso.\r    self assert: (f and: [e]) esFalso.\r    self assert: (e and: [v]) esError .\r    self assert: (e and: [f]) esError.\r\r    self assert: v esVerdadero.\r    self deny: f esVerdadero.\r    self deny: e esVerdadero.\r\r    self deny: v esFalso.\r    self assert: f esFalso.\r    self deny: e esFalso.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:05:01.025-03:00' ],
		#self : OmReference [ '35' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r            \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esVerdadero.\r    self assert: (f or: v) esVerdadero.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: e) esFalso.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r\r    self assert: v esVerdadero.\r    self deny: f esVerdadero.\r    self deny: e esVerdadero.\r\r    self deny: v esFalso.\r    self assert: f esFalso.\r    self deny: e esFalso.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:09:52.745-03:00' ],
		#self : OmReference [ '1' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esVerdadero.\r    self assert: (f or: v) esVerdadero.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: e) esFalso.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r\r    self assert: v esVerdadero.\r    self deny: f esVerdadero.\r    self deny: e esVerdadero.\r\r    self deny: v esFalso.\r    self assert: f esFalso.\r    self deny: e esFalso.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:10:05.115-03:00' ],
		#self : OmReference [ '2' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: e) esFalso.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r\r    self assert: v esVerdadero.\r    self deny: f esVerdadero.\r    self deny: e esVerdadero.\r\r    self deny: v esFalso.\r    self assert: f esFalso.\r    self deny: e esFalso.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:10:35.875-03:00' ],
		#self : OmReference [ '3' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: e) esFalso.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r\r    self assert: v esVerdadero.\r    self deny: f esVerdadero.\r    self deny: e esVerdadero.\r\r    self deny: v esFalso.\r    self assert: f esFalso.\r    self deny: e esFalso.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:10:58.516-03:00' ],
		#self : OmReference [ '4' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: e) esFalso.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r\r    self assert: v esVerdadero.\r    self deny: f esVerdadero.\r    self deny: e esVerdadero.\r\r    self deny: v esFalso.\r    self assert: f esFalso.\r    self deny: e esFalso.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:11:47.576-03:00' ],
		#self : OmReference [ '5' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esFalso.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r    self assert: v esVerdadero.\r    self deny: f esVerdadero.\r    self deny: e esVerdadero.\r\r    self deny: v esFalso.\r    self assert: f esFalso.\r    self deny: e esFalso.\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:20:35.73-03:00' ],
		#self : OmReference [ '1' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esFalso.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T17:22:33.587-03:00' ],
		#self : OmReference [ '2' ]
	},
	#content : '| v f e |\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:14:09.838-03:00' ],
		#self : OmReference [ '3' ]
	},
	#content : '| v f e complejo1 complejo2|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new.\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:16:44.516-03:00' ],
		#self : OmReference [ '4' ]
	},
	#content : '| v f e complejo1 complejo2|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber real:1 imaginary: 2.\rcomplejo2 := ComplexNumber real:3 imaginary: 4.\rcomplejo1 +complejo2.'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:18:05.284-03:00' ],
		#self : OmReference [ '5' ]
	},
	#content : '| v f e complejo1 complejo2|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rcomplejo1 +complejo2.'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:31:15.844-03:00' ],
		#self : OmReference [ '1' ]
	},
	#content : '| v f e complejo1 complejo2|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rcomplejo1 +complejo2.\r\rcomplejo3 := ComplexNumber new angle: (45 degreesToRadians) radius: 5.'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:32:45.891-03:00' ],
		#self : OmReference [ '2' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\rcomplejo3 := ComplexNumber new angle: (45 degreesToRadians) radius: 5.'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:33:50.323-03:00' ],
		#self : OmReference [ '3' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complex1 := ComplexNumber real: 5 imaginary: 6.\r        complex2 := ComplexNumber real: 3 imaginary: 4.\r        result := complex1 - complex2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:34:01.884-03:00' ],
		#self : OmReference [ '4' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber real: 5 imaginary: 6.\r        complejo2 := ComplexNumber real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:34:21.484-03:00' ],
		#self : OmReference [ '5' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber new real: 5 imaginary: 6.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:35:40.644-03:00' ],
		#self : OmReference [ '6' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber new real: 5 imaginary: 6.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 * complejo2.\r        self assert: (result real = -5).\r        self assert: (result imaginary = 10).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 / complejo2.\r        self assert: (result real = 0.44).\r        self assert: (result imaginary = 0.08).'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:36:46.753-03:00' ],
		#self : OmReference [ '7' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber new real: 5 imaginary: 6.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 * complejo2.\r        self assert: (result real = -5).\r        self assert: (result imaginary = 10).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 / complejo2.\rresult.\r        self assert: (result real = 0.44).\r        self assert: (result imaginary = 0.08).'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:38:12.636-03:00' ],
		#self : OmReference [ '8' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber new real: 5 imaginary: 6.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 * complejo2.\r        self assert: (result real = -5).\r        self assert: (result imaginary = 10).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 / complejo2.\r\r        self assert: (result real = 0.44).\r        self assert: (result imaginary = 0.08).'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:58:06.445-03:00' ],
		#self : OmReference [ '9' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber new real: 5 imaginary: 6.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 * complejo2.\r        self assert: (result real = -5).\r        self assert: (result imaginary = 10).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 / complejo2.\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:58:31.686-03:00' ],
		#self : OmReference [ '10' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber new real: 5 imaginary: 6.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 * complejo2.\r        self assert: (result real = -5).\r        self assert: (result imaginary = 10).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 / complejo2.\r\r        self assert: (result real = 0.44).\r        self assert: (result imaginary = 0.08).'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:59:23.202-03:00' ],
		#self : OmReference [ '11' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber new real: 5 imaginary: 6.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 * complejo2.\r        self assert: (result real = -5).\r        self assert: (result imaginary = 10).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 / complejo2.\r\r        self assert: (result real equals: 0.44).\r        self assert: (result imaginary = 0.08).'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T18:59:55.791-03:00' ],
		#self : OmReference [ '12' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber new real: 5 imaginary: 6.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 * complejo2.\r        self assert: (result real = -5).\r        self assert: (result imaginary = 10).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 / complejo2.\r\r        self assert: (result real = 0.44).\r        self assert: (result imaginary = 0.08).'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T19:01:19.987-03:00' ],
		#self : OmReference [ '13' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber new real: 5 imaginary: 6.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 * complejo2.\r        self assert: (result real = -5).\r        self assert: (result imaginary = 10).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 / complejo2.\r\r        self assert: (result real = (11/25)).\r        self assert: (result imaginary = 0.08).'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2024-06-30T19:01:44.169-03:00' ],
		#self : OmReference [ '14' ]
	},
	#content : '| v f e complejo1 complejo2 result|\rv := Verdadero new.\rf := Falso new.\re := TError new.\r\r    self assert: (v & v) = v.\r    self assert: (v & f) = f.\r    self assert: (v & e) = e.\r    self assert: (f & v) = f.\r    self assert: (f & f) = f.\r    self assert: (f & e) = f.\r    self assert: (e & v) = e.\r    self assert: (e & f) = e.\r    self assert: (e & e) = e.\r\r \t self assert: (v | v) = v.\r    self assert: (v | f) = v.\r    self assert: (v | e) = v.\r    self assert: (f | v) = v.\r    self assert: (f | f) = f.\r    self assert: (f | e) = e.\r    self assert: (e | v) = e.\r    self assert: (e | f) = e.\r    self assert: (e | e) = e.\r\r    self assert: (v not) esFalso .\r    self assert: f not esVerdadero .\r    self assert: e not esError .\r\r    self assert: (v or: v) esVerdadero.         \r    self assert: (v or: f) esVerdadero.\r    self assert: (v or: e) esError.\r    self assert: (f or: v) esVerdadero.\r\t self assert: (f or: f) esFalso.\r    self assert: (f or: e) esError.\r    self assert: (e or: v) esError.\r    self assert: (e or: f) esError.\r\t self assert: (e or: e) esError.\r\t\r    self assert: (v and: v) esVerdadero .\r    self assert: (v and: f) esFalso.\r    self assert: (v and: e) esError.\r    self assert: (f and: v) esFalso.\r    self assert: (f and: f) esFalso.\r    self assert: (f and: e) esError.\r    self assert: (e and: v) esError .\r    self assert: (e and: f) esError.\r    self assert: (e and: e) esError.\r\r\rcomplejo1 := ComplexNumber new real:1 imaginary: 2.\rcomplejo2 := ComplexNumber new real:3 imaginary: 4.\rresult := complejo1 + complejo2.\rself assert: (result real = 4).\rself assert: (result imaginary = 6).\r\r        complejo1 := ComplexNumber new real: 5 imaginary: 6.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 - complejo2.\r        self assert: (result real = 2).\r        self assert: (result imaginary = 2).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 * complejo2.\r        self assert: (result real = -5).\r        self assert: (result imaginary = 10).\r\r        complejo1 := ComplexNumber new real: 1 imaginary: 2.\r        complejo2 := ComplexNumber new real: 3 imaginary: 4.\r        result := complejo1 / complejo2.\r\r        self assert: (result real = (11/25)).\r        self assert: (result imaginary = \r(2/25)).'
}